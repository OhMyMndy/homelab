#cloud-config
hostname: cks
users:
  - name: ${user}
    groups:
      - sudo
    shell: /bin/bash
    ssh_authorized_keys:
      - ${ssh_public_key}
    sudo: ALL=(ALL) NOPASSWD:ALL
runcmd:
  - apt update
  - apt-get install -y -q qemu-guest-agent net-tools
  - timedatectl set-timezone Europe/Brussels
  - systemctl enable qemu-guest-agent
  - systemctl start qemu-guest-agent

  - curl -sLS https://get.arkade.dev | sh
  - echo 'export PATH=$PATH:$HOME/.arkade/bin/' >> ~${user}/.bashrc
  - chown ${user}:${user} ~${user}/.bashrc

  - swapoff -a
  - |
    cat <<EOF | tee /etc/modules-load.d/k8s.conf >/dev/null
    overlay
    br_netfilter
    EOF
  - modprobe overlay
  - modprobe br_netfilter
  - |
    cat <<EOF | tee /etc/sysctl.d/k8s.conf >/dev/null
    net.bridge.bridge-nf-call-iptables  = 1
    net.bridge.bridge-nf-call-ip6tables = 1
    net.ipv4.ip_forward                 = 1
    EOF
  - sysctl --system >/dev/null


  - apt-get update
  - apt-get install -y containerd runc

  - arkade get helm --path /tmp
  - install -m 755 /tmp/helm /usr/local/bin/helm

  - arkade get trivy --path /tmp
  - install -m 755 /tmp/trivy /usr/local/bin/trivy

  - arkade get cilium --path /tmp
  - install -m 755 /tmp/cilium /usr/local/bin/cilium

  - arkade get opa --path /tmp
  - install -m 755 /tmp/opa /usr/local/bin/opa

  - mkdir -p /etc/containerd
  - containerd config default | tee /etc/containerd/config.toml >/dev/null
  - sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
  - |
    cat <<EOF | tee -a /etc/containerd/config.toml
    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runsc]
      runtime_type = "io.containerd.runsc.v1"
    EOF

  - apt-get install -y apt-transport-https ca-certificates curl gnupg
  - curl -fsSL https://gvisor.dev/archive.key | sudo gpg --dearmor -o /usr/share/keyrings/gvisor-archive-keyring.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/gvisor-archive-keyring.gpg] https://storage.googleapis.com/gvisor/releases release main" | sudo tee /etc/apt/sources.list.d/gvisor.list > /dev/null
  - apt-get update
  - apt-get install -y runsc


  - systemctl restart containerd

  - apt-get install -y apt-transport-https ca-certificates curl gpg
  - curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  - |
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
  - apt-get update

  - apt-cache policy kubelet | head -n 20

  - VERSION=1.31.6-1.1
  - apt-get install -y kubelet=${"$"}VERSION kubeadm=${"$"}VERSION kubectl=${"$"}VERSION
  - apt-mark hold kubelet kubeadm kubectl containerd
  - systemctl enable --now kubelet.service
  - systemctl enable --now containerd.service

  - kubeadm init --kubernetes-version v1.31.6

  - mkdir -p ~${user}/.kube
  - cp /etc/kubernetes/admin.conf ~${user}/.kube/config
  - chown -R ${user}:${user} ~${user}/.kube

  - export KUBECONFIG=/etc/kubernetes/admin.conf

  - kubectl taint nodes $(hostname) node-role.kubernetes.io/control-plane:NoSchedule-

  - helm repo add cilium https://helm.cilium.io/
  - |
    helm upgrade --install cilium cilium/cilium --version 1.17.1 \
      --set ipam.operator.clusterPoolIPv4PodCIDRList[0]="10.1.0.0/16" \
      --namespace kube-system \
      --set operator.replicas=2

  - |
      cat <<EOF | kubectl apply -f -
      apiVersion: node.k8s.io/v1
      kind: RuntimeClass
      metadata:
        name: gvisor
      handler: runsc
      EOF


  #- cat <<EOF | kubectl apply -f -
  #  apiVersion: v1
  #  kind: Pod
  #  metadata:
  #    name: nginx-gvisor
  #  spec:
  #    runtimeClassName: gvisor
  #    containers:
  #    - name: nginx
  #      image: nginx
  #  EOF
  - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
  - |
    helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
        --version 4.12.0 -n ingress-nginx --create-namespace \
        --set controller.kind=DaemonSet \
        --set controller.hostNetwork=true \
        --set controller.config.force-ssl-redirect=true \
        --set controller.service.type=NodePort \
        --set controller.ingressClassResource.default=true

  - helm repo add gatekeeper https://open-policy-agent.github.io/gatekeeper/charts
  - helm upgrade --install gatekeeper gatekeeper/gatekeeper --namespace gatekeeper-system --create-namespace

  - kubectl apply -n gatekeeper-system -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/refs/heads/master/library/general/disallowedtags/template.yaml
  - kubectl apply -n gatekeeper-system -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/refs/heads/master/library/general/disallowedtags/samples/container-image-must-not-have-latest-tag/constraint.yaml

  # - kubectl apply -n gatekeeper-system -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/refs/heads/master/library/general/replicalimits/template.yaml


  - export IP_ADDRESS="$(ip route get 1.1.1.1 | head -1 | awk '{print $7}')"

  - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
  - |
    helm upgrade --install --create-namespace -n monitoring kube-prometheus-stack prometheus-community/kube-prometheus-stack \
        --set alertmanager.ingress.enabled=true --set alertmanager.ingress.ingressClassName=nginx \
        --set alertmanager.ingress.hosts[0]=alertmanager.$IP_ADDRESS.sslip.io \
        --set grafana.ingress.enabled=true --set grafana.ingress.ingressClassName=nginx  \
        --set grafana.ingress.hosts[0]=grafana.$IP_ADDRESS.sslip.io

  - echo "done" > /tmp/cloud-config.done
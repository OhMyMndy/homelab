#cloud-config
hostname: cks
users:
  - name: ${user}
    groups:
      - sudo
    shell: /bin/bash
    ssh_authorized_keys:
      - ${ssh_public_key}
    sudo: ALL=(ALL) NOPASSWD:ALL
runcmd:
  - apt update
  - apt-get install -y -q qemu-guest-agent net-tools
  - timedatectl set-timezone Europe/Brussels
  - systemctl enable qemu-guest-agent
  - systemctl start qemu-guest-agent

  - curl -sLS https://get.arkade.dev | sh
  - echo 'export PATH=${"$"}PATH:${"$"}HOME/.arkade/bin/' >> ~${user}/.bashrc
  - chown ${user}:${user} ~${user}/.bashrc
  - swapoff -a
  - |
    cat <<EOF | tee /etc/modules-load.d/k8s.conf >/dev/null
    overlay
    br_netfilter
    EOF
  - modprobe overlay
  - modprobe br_netfilter
  - |
    cat <<EOF | tee /etc/sysctl.d/k8s.conf >/dev/null
    net.bridge.bridge-nf-call-iptables  = 1
    net.bridge.bridge-nf-call-ip6tables = 1
    net.ipv4.ip_forward                 = 1
    EOF
  - sysctl --system >/dev/null


  - apt-get update
  - apt-get install -y containerd runc linux-kvm

  - arkade get helm --path /tmp
  - install -m 755 /tmp/helm /usr/local/bin/helm

  - arkade get trivy --path /tmp
  - install -m 755 /tmp/trivy /usr/local/bin/trivy

  - arkade get cilium --path /tmp
  - install -m 755 /tmp/cilium /usr/local/bin/cilium

  - arkade get opa --path /tmp
  - install -m 755 /tmp/opa /usr/local/bin/opa

  - mkdir -p /etc/containerd
  - containerd config default | tee /etc/containerd/config.toml >/dev/null
  - sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
  - |
    cat <<EOF | tee -a /etc/containerd/config.toml
    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runsc]
      runtime_type = "io.containerd.runsc.v1"
    EOF

  - apt-get install -y apt-transport-https ca-certificates curl gnupg
  - curl -fsSL https://gvisor.dev/archive.key | sudo gpg --dearmor -o /usr/share/keyrings/gvisor-archive-keyring.gpg
  - echo "deb [arch=${"$"}(dpkg --print-architecture) signed-by=/usr/share/keyrings/gvisor-archive-keyring.gpg] https://storage.googleapis.com/gvisor/releases release main" | sudo tee /etc/apt/sources.list.d/gvisor.list > /dev/null
  - apt-get update
  - apt-get install -y runsc


  - systemctl restart containerd

  - apt-get install -y apt-transport-https ca-certificates curl gpg
  - curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  - |
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
  - apt-get update

  - apt-cache policy kubelet | head -n 20

  - VERSION=1.31.6-1.1
  - apt-get install -y kubelet=${"$"}VERSION kubeadm=${"$"}VERSION kubectl=${"$"}VERSION
  - apt-mark hold kubelet kubeadm kubectl containerd
  - systemctl enable --now kubelet.service
  - systemctl enable --now containerd.service

  - kubeadm init --kubernetes-version v1.31.6

  - mkdir -p ~${user}/.kube
  - cp /etc/kubernetes/admin.conf ~${user}/.kube/config
  - chown -R ${user}:${user} ~${user}/.kube

  - export KUBECONFIG=/etc/kubernetes/admin.conf

  - kubectl taint nodes ${"$"}(hostname) node-role.kubernetes.io/control-plane:NoSchedule-

  - helm repo add cilium https://helm.cilium.io/
  - |
    helm upgrade --install cilium cilium/cilium --version 1.17.1 \
      --set ipam.operator.clusterPoolIPv4PodCIDRList[0]="10.1.0.0/16" \
      --namespace kube-system \
      --set operator.replicas=2

  - |
      cat <<EOF | kubectl apply -f -
      apiVersion: node.k8s.io/v1
      kind: RuntimeClass
      metadata:
        name: gvisor
      handler: runsc
      EOF

  - bash -c "${"$"}(curl -fsSL https://raw.githubusercontent.com/kata-containers/kata-containers/main/utils/kata-manager.sh) -o"

  - kubectl apply -f https://raw.githubusercontent.com/kata-containers/kata-containers/main/tools/packaging/kata-deploy/runtimeclasses/kata-runtimeClasses.yaml

  #- cat <<EOF | kubectl apply -f -
  #  apiVersion: v1
  #  kind: Pod
  #  metadata:
  #    name: nginx-gvisor
  #  spec:
  #    runtimeClassName: gvisor
  #    containers:
  #    - name: nginx
  #      image: nginx
  #  EOF

  - kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.31/deploy/local-path-storage.yaml
  - |
    kubectl patch storageclass local-path -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

  - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
  - |
    helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
        --version 4.12.0 -n ingress-nginx --create-namespace \
        --set controller.kind=DaemonSet \
        --set controller.hostNetwork=true \
        --set controller.config.force-ssl-redirect=true \
        --set controller.service.type=NodePort \
        --set controller.ingressClassResource.default=true

  - helm repo add gatekeeper https://open-policy-agent.github.io/gatekeeper/charts
  - |
    helm upgrade --install gatekeeper gatekeeper/gatekeeper --namespace gatekeeper-system --create-namespace \
      --version 3.18.2

  - kubectl apply -n gatekeeper-system -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/refs/heads/master/library/general/disallowedtags/template.yaml
  #- kubectl apply -n gatekeeper-system -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/refs/heads/master/library/general/disallowedtags/samples/container-image-must-not-have-latest-tag/constraint.yaml

  # - kubectl apply -n gatekeeper-system -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/refs/heads/master/library/general/replicalimits/template.yaml


  - helm repo add stakater https://stakater.github.io/stakater-charts
  - |
    helm upgrade --install reloader stakater/reloader --set reloader.autoReloadAll=true \
      --namespace reloader --create-namespace --version 2.0.0


  - export IP_ADDRESS="${"$"}(ip route get 1.1.1.1 | head -1 | awk '{print ${"$"}7}')"

  - helm repo add grafana https://grafana.github.io/helm-charts

  - |
      cat <<EOF | tee /tmp/kube-prom-stack.yml >/dev/null
      alertmanager:
        ingress:
          enabled: true
          ingressClassName: nginx
          hosts:
            - alertmanager.${"$"}IP_ADDRESS.sslip.io

      grafana:
        ingress:
          enabled: true
          ingressClassName: nginx
          hosts:
            - grafana.${"$"}IP_ADDRESS.sslip.io
        additionalDataSources:
          - name: Loki
            uid: loki
            type: loki
            orgId: 1
            jsonData:
              httpHeaderName1: "X-Scope-OrgID"
            secureJsonData:
              httpHeaderValue1: 1
            url: http://loki-gateway
            isDefault: false
            editable: true
          # https://grafana.com/docs/grafana/latest/datasources/tempo/configure-tempo-data-source/#provision-the-data-source
          - name: Tempo
            uid: tempo
            type: tempo
            editable: false
            url: http://tempo-tempo-query-frontend:3100
            isDefault: false
            jsonData:
              tracesToLogsV2:
                datasourceUid: loki
              lokiSearch:
                datasourceUid: loki
              tracesToMetrics:
                datasourceUid: prom
              serviceMap:
                datasourceUid: prom
      EOF
  - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
  - |
    helm upgrade --install --create-namespace -n monitoring kube-prometheus-stack prometheus-community/kube-prometheus-stack \
        --version 69.8.2 -f /tmp/kube-prom-stack.yml

  - |
    cat <<EOF | tee /tmp/loki-values.yml >/dev/null
    loki:
      commonConfig:
        replication_factor: 1
      schemaConfig:
        configs:
          - from: "2024-04-01"
            store: tsdb
            object_store: s3
            schema: v13
            index:
              prefix: loki_index_
              period: 24h
      pattern_ingester:
          enabled: true
      limits_config:
        allow_structured_metadata: true
        volume_enabled: true
      ruler:
        enable_api: true

    minio:
      enabled: true

    deploymentMode: SingleBinary

    singleBinary:
      replicas: 1

    # Zero out replica counts of other deployment modes
    backend:
      replicas: 0
    read:
      replicas: 0
    write:
      replicas: 0

    ingester:
      replicas: 0
    querier:
      replicas: 0
    queryFrontend:
      replicas: 0
    queryScheduler:
      replicas: 0
    distributor:
      replicas: 0
    compactor:
      replicas: 0
    indexGateway:
      replicas: 0
    bloomCompactor:
      replicas: 0
    bloomGateway:
      replicas: 0
    EOF



  - helm repo add grafana https://grafana.github.io/helm-charts

  # TODO: Disable multi tenancy
  - helm upgrade --install loki grafana/loki -n monitoring --create-namespace --version 6.28.0 -f /tmp/loki-values.yml

  - |
    helm upgrade --install --namespace monitoring k8s-monitoring grafana/k8s-monitoring \
    --version 2.0.16 \
    --set cluster.name=cks \
    --set alloy-singleton.enabled=true \
    --set alloy-logs.enabled=true \
    --set clusterEvents.enabled=true \
    --set podLogs.enabled=true \
    --set nodeLogs.enabled=true \
    --set destinations[0].name=loki --set destinations[0].type=loki \
    --set destinations[0].url=http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push \
    --set-json=destinations[0].extraHeaders='{"X-Scope-OrgID": 1}'


  - echo "done" > /tmp/cloud-config.done
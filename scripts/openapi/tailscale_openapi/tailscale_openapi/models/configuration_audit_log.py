# coding: utf-8

"""
    Tailscale API

    ### Overview  **The API endpoints documented here are stable. However, the OpenAPI spec used to generate this documentation is unstable. It may change or break without notice.**  The Tailscale API is a (mostly) RESTful API. Typically, both POST bodies and responses are JSON-encoded.  ### Base URL  The base URL for the Tailscale API is https://api.tailscale.com/api/v2/.  Examples in this document may abbreviate this to `/api/v2/`.  ### Authentication  Requests to the Tailscale API are authenticated with an API access token (sometimes called an API key). Access tokens can be supplied as the username portion of HTTP Basic authentication (leave the password blank) or as an OAuth Bearer token:  ``` // passing token with basic auth curl -u \"tskey-api-xxxxx:\" https://api.tailscale.com/api/v2/...  // passing token as bearer token curl -H \"Authorization: Bearer tskey-api-xxxxx\" https://api.tailscale.com/api/v2/... ```  Access tokens for individual users can be created and managed from the [Keys](https://login.tailscale.com/admin/settings/keys) page of the admin console. These tokens will have the same permissions as the owning user, and can be set to expire in 1 to 90 days. Access tokens are identifiable by the prefix tskey-api-.  Alternatively, an OAuth client can be used to create short-lived access tokens with scoped permission. OAuth clients don't expire, and can therefore be used to provide ongoing access to the API, creating access tokens as needed. OAuth clients and the access tokens they create are not tied to an individual Tailscale user. OAuth client secrets are identifiable by the prefix tskey-client-. Learn more about [OAuth clients].  [ OAuth clients ]: https://tailscale.com/kb/1215/  ### Errors  The Tailscale API returns status codes consistent with standard HTTP conventions. In addition to the status code, errors may include additional information in the response body:  ``` {   \"message\": \"additional error information\" } ```  ### Pagination  The Tailscale API does not currently support pagination. All results are returned at once.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from tailscale_openapi.models.configuration_audit_log_actor import ConfigurationAuditLogActor
from tailscale_openapi.models.configuration_audit_log_target import ConfigurationAuditLogTarget
from typing import Optional, Set
from typing_extensions import Self

class ConfigurationAuditLog(BaseModel):
    """
    ConfigurationAuditLog
    """ # noqa: E501
    event_time: StrictStr = Field(description="Timestamp of the audit log event, in RFC 3339 format.", alias="eventTime")
    type: StrictStr = Field(description="The type of log (always \"CONFIG\").")
    deferred_at: Optional[StrictStr] = Field(default=None, description="Timestamp recording the time that the audit log rate limiter enqueued the record to be logged at a future time, in RFC 3339 format.", alias="deferredAt")
    event_group_id: StrictStr = Field(description="Identifier assigned to one or more audit log events, all of which are the result of a single operation.", alias="eventGroupID")
    origin: StrictStr = Field(description="The initiator of the action that generated the event, typically an API or user interface, like the Tailscale admin panel.")
    actor: ConfigurationAuditLogActor
    target: ConfigurationAuditLogTarget
    action: StrictStr = Field(description="The type of change attempted against the `target`.")
    old: Optional[Any] = Field(default=None, description="The value of `target.property`` prior to the event.")
    new: Optional[Any] = Field(default=None, description="The value of `target.property` after the event.")
    action_details: Optional[StrictStr] = Field(default=None, description="Additional information about the event, such as a client-provided reason, if it exists.", alias="actionDetails")
    error: Optional[StrictStr] = Field(default=None, description="Provided when the configuration change failed to be completed. It is a user-presentable reason for the failure.")
    __properties: ClassVar[List[str]] = ["eventTime", "type", "deferredAt", "eventGroupID", "origin", "actor", "target", "action", "old", "new", "actionDetails", "error"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CONFIG']):
            raise ValueError("must be one of enum values ('CONFIG')")
        return value

    @field_validator('origin')
    def origin_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ADMIN_CONSOLE', 'CONFIG_API', 'CONTROL', 'IDENTITY_PROVIDER', 'NODE', 'SUPPORT_REQUEST', 'STRIPE', 'SECURITY_NOTIFICATION', 'LEGAL_NOTIFICATION']):
            raise ValueError("must be one of enum values ('ADMIN_CONSOLE', 'CONFIG_API', 'CONTROL', 'IDENTITY_PROVIDER', 'NODE', 'SUPPORT_REQUEST', 'STRIPE', 'SECURITY_NOTIFICATION', 'LEGAL_NOTIFICATION')")
        return value

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['LOGIN', 'LOGOUT', 'CREATE', 'UPDATE', 'DELETE', 'CANCEL', 'REVOKE', 'APPROVE', 'SUSPEND', 'RESTORE', 'ENABLE', 'DISABLE', 'ACCEPT', 'EXPIRED', 'PUSH_USER', 'PUSH_GROUP', 'VERIFY', 'JOIN_WAITLIST', 'INVITE', 'JOIN', 'LEAVE', 'RESEND', 'MIGRATE_AUTH_PROVIDER']):
            raise ValueError("must be one of enum values ('LOGIN', 'LOGOUT', 'CREATE', 'UPDATE', 'DELETE', 'CANCEL', 'REVOKE', 'APPROVE', 'SUSPEND', 'RESTORE', 'ENABLE', 'DISABLE', 'ACCEPT', 'EXPIRED', 'PUSH_USER', 'PUSH_GROUP', 'VERIFY', 'JOIN_WAITLIST', 'INVITE', 'JOIN', 'LEAVE', 'RESEND', 'MIGRATE_AUTH_PROVIDER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigurationAuditLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of actor
        if self.actor:
            _dict['actor'] = self.actor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        # set to None if old (nullable) is None
        # and model_fields_set contains the field
        if self.old is None and "old" in self.model_fields_set:
            _dict['old'] = None

        # set to None if new (nullable) is None
        # and model_fields_set contains the field
        if self.new is None and "new" in self.model_fields_set:
            _dict['new'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigurationAuditLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventTime": obj.get("eventTime"),
            "type": obj.get("type"),
            "deferredAt": obj.get("deferredAt"),
            "eventGroupID": obj.get("eventGroupID"),
            "origin": obj.get("origin"),
            "actor": ConfigurationAuditLogActor.from_dict(obj["actor"]) if obj.get("actor") is not None else None,
            "target": ConfigurationAuditLogTarget.from_dict(obj["target"]) if obj.get("target") is not None else None,
            "action": obj.get("action"),
            "old": obj.get("old"),
            "new": obj.get("new"),
            "actionDetails": obj.get("actionDetails"),
            "error": obj.get("error")
        })
        return _obj



# coding: utf-8

"""
    Tailscale API

    ### Overview  **The API endpoints documented here are stable. However, the OpenAPI spec used to generate this documentation is unstable. It may change or break without notice.**  The Tailscale API is a (mostly) RESTful API. Typically, both POST bodies and responses are JSON-encoded.  ### Base URL  The base URL for the Tailscale API is https://api.tailscale.com/api/v2/.  Examples in this document may abbreviate this to `/api/v2/`.  ### Authentication  Requests to the Tailscale API are authenticated with an API access token (sometimes called an API key). Access tokens can be supplied as the username portion of HTTP Basic authentication (leave the password blank) or as an OAuth Bearer token:  ``` // passing token with basic auth curl -u \"tskey-api-xxxxx:\" https://api.tailscale.com/api/v2/...  // passing token as bearer token curl -H \"Authorization: Bearer tskey-api-xxxxx\" https://api.tailscale.com/api/v2/... ```  Access tokens for individual users can be created and managed from the [Keys](https://login.tailscale.com/admin/settings/keys) page of the admin console. These tokens will have the same permissions as the owning user, and can be set to expire in 1 to 90 days. Access tokens are identifiable by the prefix tskey-api-.  Alternatively, an OAuth client can be used to create short-lived access tokens with scoped permission. OAuth clients don't expire, and can therefore be used to provide ongoing access to the API, creating access tokens as needed. OAuth clients and the access tokens they create are not tied to an individual Tailscale user. OAuth client secrets are identifiable by the prefix tskey-client-. Learn more about [OAuth clients].  [ OAuth clients ]: https://tailscale.com/kb/1215/  ### Errors  The Tailscale API returns status codes consistent with standard HTTP conventions. In addition to the status code, errors may include additional information in the response body:  ``` {   \"message\": \"additional error information\" } ```  ### Pagination  The Tailscale API does not currently support pagination. All results are returned at once.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class LogstreamEndpointPublishingStatus(BaseModel):
    """
    Latest status of log stream publishing for a specific type of log.
    """ # noqa: E501
    last_activity: StrictStr = Field(description="Timestamp of the most recent publishing activity, in RFC 3339 format.", alias="lastActivity")
    last_error: StrictStr = Field(description="The most recent error (if any).", alias="lastError")
    max_body_size: StrictInt = Field(description="The size of the largest single request body.", alias="maxBodySize")
    num_bytes_sent: StrictInt = Field(description="Total bytes published across all requests.", alias="numBytesSent")
    num_entries_sent: StrictInt = Field(description="The total number of entries published.", alias="numEntriesSent")
    num_spoofed_entries: StrictInt = Field(description="The number of spoofed entries published. A spoofed entry is one that failed to validate because we did not see receive a matching flow log from the other side of the connection.", alias="numSpoofedEntries")
    num_total_requests: StrictInt = Field(description="The total number of requests made to the streaming endpoint.", alias="numTotalRequests")
    num_failed_requests: StrictInt = Field(description="The total number of requests to the streaming endpoint that have failed.", alias="numFailedRequests")
    rate_bytes_sent: Union[StrictFloat, StrictInt] = Field(description="The exponentially weighted moving average rate at which data is being streamed to the endpoint, in bytes per second.", alias="rateBytesSent")
    rate_entries_sent: Union[StrictFloat, StrictInt] = Field(description="The exponentially weighted moving average rate at which entries are being sent to the endpoint, in entries per second.", alias="rateEntriesSent")
    rate_total_requests: Union[StrictFloat, StrictInt] = Field(description="The exponentially weighted moving average rate at which requests are being made to the endpoint, in requests per second.", alias="rateTotalRequests")
    rate_failed_requests: Union[StrictFloat, StrictInt] = Field(description="The exponentially weighted moving average rate at which requests are failing, in requests per second.", alias="rateFailedRequests")
    __properties: ClassVar[List[str]] = ["lastActivity", "lastError", "maxBodySize", "numBytesSent", "numEntriesSent", "numSpoofedEntries", "numTotalRequests", "numFailedRequests", "rateBytesSent", "rateEntriesSent", "rateTotalRequests", "rateFailedRequests"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogstreamEndpointPublishingStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogstreamEndpointPublishingStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lastActivity": obj.get("lastActivity"),
            "lastError": obj.get("lastError"),
            "maxBodySize": obj.get("maxBodySize"),
            "numBytesSent": obj.get("numBytesSent"),
            "numEntriesSent": obj.get("numEntriesSent"),
            "numSpoofedEntries": obj.get("numSpoofedEntries"),
            "numTotalRequests": obj.get("numTotalRequests"),
            "numFailedRequests": obj.get("numFailedRequests"),
            "rateBytesSent": obj.get("rateBytesSent"),
            "rateEntriesSent": obj.get("rateEntriesSent"),
            "rateTotalRequests": obj.get("rateTotalRequests"),
            "rateFailedRequests": obj.get("rateFailedRequests")
        })
        return _obj



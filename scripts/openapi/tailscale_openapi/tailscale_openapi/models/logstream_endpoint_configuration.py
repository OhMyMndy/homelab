# coding: utf-8

"""
    Tailscale API

    ### Overview  **The API endpoints documented here are stable. However, the OpenAPI spec used to generate this documentation is unstable. It may change or break without notice.**  The Tailscale API is a (mostly) RESTful API. Typically, both POST bodies and responses are JSON-encoded.  ### Base URL  The base URL for the Tailscale API is https://api.tailscale.com/api/v2/.  Examples in this document may abbreviate this to `/api/v2/`.  ### Authentication  Requests to the Tailscale API are authenticated with an API access token (sometimes called an API key). Access tokens can be supplied as the username portion of HTTP Basic authentication (leave the password blank) or as an OAuth Bearer token:  ``` // passing token with basic auth curl -u \"tskey-api-xxxxx:\" https://api.tailscale.com/api/v2/...  // passing token as bearer token curl -H \"Authorization: Bearer tskey-api-xxxxx\" https://api.tailscale.com/api/v2/... ```  Access tokens for individual users can be created and managed from the [Keys](https://login.tailscale.com/admin/settings/keys) page of the admin console. These tokens will have the same permissions as the owning user, and can be set to expire in 1 to 90 days. Access tokens are identifiable by the prefix tskey-api-.  Alternatively, an OAuth client can be used to create short-lived access tokens with scoped permission. OAuth clients don't expire, and can therefore be used to provide ongoing access to the API, creating access tokens as needed. OAuth clients and the access tokens they create are not tied to an individual Tailscale user. OAuth client secrets are identifiable by the prefix tskey-client-. Learn more about [OAuth clients].  [ OAuth clients ]: https://tailscale.com/kb/1215/  ### Errors  The Tailscale API returns status codes consistent with standard HTTP conventions. In addition to the status code, errors may include additional information in the response body:  ``` {   \"message\": \"additional error information\" } ```  ### Pagination  The Tailscale API does not currently support pagination. All results are returned at once.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from tailscale_openapi.models.log_type import LogType
from typing import Optional, Set
from typing_extensions import Self

class LogstreamEndpointConfiguration(BaseModel):
    """
    The current configuration of a log streaming endpoint.
    """ # noqa: E501
    log_type: Optional[LogType] = Field(default=None, description="The type of log that is streamed to this endpoint.", alias="logType")
    destination_type: Optional[StrictStr] = Field(default=None, description="The type of system to which logs are being streamed.", alias="destinationType")
    url: Optional[StrictStr] = Field(default=None, description="The URL to which log streams are being posted. If the DestinationType is `s3`, the URL may be (and often is) empty to use the official Amazon S3 endpoint.")
    user: Optional[StrictStr] = Field(default=None, description="The username with which log streams to this endpoint are authenticated.")
    token: Optional[StrictStr] = Field(default=None, description="The token/password with which log streams to this endpoint should be authenticated.")
    s3_bucket: Optional[StrictStr] = Field(default=None, description="The S3 bucket name. Required if the destinationType is `s3`.", alias="s3Bucket")
    s3_region: Optional[StrictStr] = Field(default=None, description="The region in which the S3 bucket is located. Required if the destinationType is `s3`.", alias="s3Region")
    s3_key_prefix: Optional[StrictStr] = Field(default=None, description="An optional S3 key prefix to prepend to the auto-generated S3 key name.", alias="s3KeyPrefix")
    s3_authentication_type: Optional[StrictStr] = Field(default=None, description="What type of authentication to use for S3. Required if the destinationType is `s3`. Tailscale recommends using `rolearn`. See [Amazon documentation](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_common-scenarios_third-party.html).", alias="s3AuthenticationType")
    s3_access_key_id: Optional[StrictStr] = Field(default=None, description="The S3 access key ID. Required if the destinationType is `s3` and `authenticationType` is `accesskey`.", alias="s3AccessKeyId")
    s3_secret_access_key: Optional[StrictStr] = Field(default=None, description="The S3 secret access key. Required if the destinationType is `s3` and `authenticationType` is `accesskey`.", alias="s3SecretAccessKey")
    s3_role_arn: Optional[StrictStr] = Field(default=None, description="The Role ARN that Tailscale should supply to AWS when authenticating using role-based authentication. Required if the destinationType is `s3` and `authenticationType` is `rolearn`.", alias="s3RoleArn")
    aws_external_id: Optional[StrictStr] = Field(default=None, description="The ID of an AwsExternalId that identifies what external ID Tailscale should supply to AWS when authenticating using role-based authentication. Required if the destinationType is `s3` and `authenticationType` is `rolearn`. This corresponds to the `id` field obtained from [tailnet/{tailnet}/aws-external-id](#tag/logging/POST/tailnet/{tailnet}/aws-external-id).", alias="awsExternalId")
    s3_external_id: Optional[StrictStr] = Field(default=None, description="The AWS external id that Tailscale supplies when authenticating using role-based authentication. Populated if the destinationType is `s3` and `authenticationType` is `rolearn`.", alias="s3ExternalId")
    __properties: ClassVar[List[str]] = ["logType", "destinationType", "url", "user", "token", "s3Bucket", "s3Region", "s3KeyPrefix", "s3AuthenticationType", "s3AccessKeyId", "s3SecretAccessKey", "s3RoleArn", "awsExternalId", "s3ExternalId"]

    @field_validator('destination_type')
    def destination_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['splunk', 'elastic', 'panther', 'cribl', 'datadog', 'axiom', 's3']):
            raise ValueError("must be one of enum values ('splunk', 'elastic', 'panther', 'cribl', 'datadog', 'axiom', 's3')")
        return value

    @field_validator('s3_authentication_type')
    def s3_authentication_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['accesskey', 'rolearn']):
            raise ValueError("must be one of enum values ('accesskey', 'rolearn')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogstreamEndpointConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "log_type",
            "s3_external_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogstreamEndpointConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "logType": obj.get("logType"),
            "destinationType": obj.get("destinationType"),
            "url": obj.get("url"),
            "user": obj.get("user"),
            "token": obj.get("token"),
            "s3Bucket": obj.get("s3Bucket"),
            "s3Region": obj.get("s3Region"),
            "s3KeyPrefix": obj.get("s3KeyPrefix"),
            "s3AuthenticationType": obj.get("s3AuthenticationType"),
            "s3AccessKeyId": obj.get("s3AccessKeyId"),
            "s3SecretAccessKey": obj.get("s3SecretAccessKey"),
            "s3RoleArn": obj.get("s3RoleArn"),
            "awsExternalId": obj.get("awsExternalId"),
            "s3ExternalId": obj.get("s3ExternalId")
        })
        return _obj



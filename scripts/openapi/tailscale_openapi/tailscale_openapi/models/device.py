# coding: utf-8

"""
    Tailscale API

    ### Overview  **The API endpoints documented here are stable. However, the OpenAPI spec used to generate this documentation is unstable. It may change or break without notice.**  The Tailscale API is a (mostly) RESTful API. Typically, both POST bodies and responses are JSON-encoded.  ### Base URL  The base URL for the Tailscale API is https://api.tailscale.com/api/v2/.  Examples in this document may abbreviate this to `/api/v2/`.  ### Authentication  Requests to the Tailscale API are authenticated with an API access token (sometimes called an API key). Access tokens can be supplied as the username portion of HTTP Basic authentication (leave the password blank) or as an OAuth Bearer token:  ``` // passing token with basic auth curl -u \"tskey-api-xxxxx:\" https://api.tailscale.com/api/v2/...  // passing token as bearer token curl -H \"Authorization: Bearer tskey-api-xxxxx\" https://api.tailscale.com/api/v2/... ```  Access tokens for individual users can be created and managed from the [Keys](https://login.tailscale.com/admin/settings/keys) page of the admin console. These tokens will have the same permissions as the owning user, and can be set to expire in 1 to 90 days. Access tokens are identifiable by the prefix tskey-api-.  Alternatively, an OAuth client can be used to create short-lived access tokens with scoped permission. OAuth clients don't expire, and can therefore be used to provide ongoing access to the API, creating access tokens as needed. OAuth clients and the access tokens they create are not tied to an individual Tailscale user. OAuth client secrets are identifiable by the prefix tskey-client-. Learn more about [OAuth clients].  [ OAuth clients ]: https://tailscale.com/kb/1215/  ### Errors  The Tailscale API returns status codes consistent with standard HTTP conventions. In addition to the status code, errors may include additional information in the response body:  ``` {   \"message\": \"additional error information\" } ```  ### Pagination  The Tailscale API does not currently support pagination. All results are returned at once.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from tailscale_openapi.models.device_client_connectivity import DeviceClientConnectivity
from tailscale_openapi.models.device_posture_identity import DevicePostureIdentity
from typing import Optional, Set
from typing_extensions import Self

class Device(BaseModel):
    """
    A Tailscale device (sometimes referred to as *node* or *machine*), is any computer or mobile device that joins a tailnet.  Each device has a unique ID (`nodeId` in the schema below) that is used to identify the device in API calls. This ID can be found by going to the [Machines](https://login.tailscale.com/admin/machines) page in the admin console, selecting the relevant device, then finding the ID in the Machine Details section. You can also [list all devices](#tag/devices/get/tailnet/{tailnet}/devices) in the tailnet to get their `nodeId` values. 
    """ # noqa: E501
    addresses: Optional[List[StrictStr]] = Field(default=None, description="A list of Tailscale IP addresses for the device, including both IPv4 (formatted as 100.x.y.z) and IPv6 (formatted as fd7a:115c:a1e0:a:b:c:d:e) addresses. ")
    id: Optional[StrictStr] = Field(default=None, description="The legacy identifier for a device; you can supply this value wherever {deviceId} is indicated in the endpoint. Note that although \"id\" is still accepted, \"nodeId\" is preferred. ")
    node_id: Optional[StrictStr] = Field(default=None, description="The preferred identifier for a device; supply this value wherever {deviceId} is indicated in the endpoint. ", alias="nodeId")
    user: Optional[StrictStr] = Field(default=None, description="The user who registered the node. For untagged nodes,  this user is the device owner. ")
    name: Optional[StrictStr] = Field(default=None, description="The MagicDNS name of the device. Learn more about MagicDNS at https://tailscale.com/kb/1081/. ")
    hostname: Optional[StrictStr] = Field(default=None, description="The machine name in the admin console. Learn more about machine names at https://tailscale.com/kb/1098/. ")
    client_version: Optional[StrictStr] = Field(default=None, description="The version of the Tailscale client software; this is empty for external devices. ", alias="clientVersion")
    update_available: Optional[StrictBool] = Field(default=None, description="'true' if a Tailscale client version upgrade is available. This value is empty for external devices. ", alias="updateAvailable")
    os: Optional[StrictStr] = Field(default=None, description="The operating system that the device is running. ")
    created: Optional[datetime] = Field(default=None, description="The date on which the device was added to the tailnet; this is empty for external devices. ")
    last_seen: Optional[datetime] = Field(default=None, description="When device was last active on the tailnet. ", alias="lastSeen")
    key_expiry_disabled: Optional[StrictBool] = Field(default=None, description="'true' if the keys for the device will not expire. Learn more at https://tailscale.com/kb/1028/. ", alias="keyExpiryDisabled")
    expires: Optional[datetime] = Field(default=None, description="The expiration date of the device's auth key. Learn more about key expiry at https://tailscale.com/kb/1028/. ")
    authorized: Optional[StrictBool] = Field(default=None, description="'true' if the device has been authorized to join the tailnet; otherwise, 'false'. Learn more about device authorization at https://tailscale.com/kb/1099/. ")
    is_external: Optional[StrictBool] = Field(default=None, description="'true', indicates that a device is not a member of the tailnet, but is shared in to the tailnet; if 'false', the device is a member of the tailnet. Learn more about node sharing at https://tailscale.com/kb/1084/. ", alias="isExternal")
    machine_key: Optional[StrictStr] = Field(default=None, description="For internal use and is not required for any API operations. This value is empty for external devices. ", alias="machineKey")
    node_key: Optional[StrictStr] = Field(default=None, description="Mostly for internal use, required for select operations, such as adding a node to a locked tailnet. Learn about tailnet locks at https://tailscale.com/kb/1226/. ", alias="nodeKey")
    blocks_incoming_connections: Optional[StrictBool] = Field(default=None, description="'true' if the device is not allowed to accept any connections over Tailscale, including pings. Learn more in the \"Allow incoming connections\" section of https://tailscale.com/kb/1072/. ", alias="blocksIncomingConnections")
    enabled_routes: Optional[List[StrictStr]] = Field(default=None, description="The subnet routes for this device that have been approved by a tailnet admin. Learn more about subnet routes at https://tailscale.com/kb/1019/. ", alias="enabledRoutes")
    advertised_routes: Optional[List[StrictStr]] = Field(default=None, description="The subnets this device requests to expose. Learn more about subnet routes at https://tailscale.com/kb/1019/. ", alias="advertisedRoutes")
    client_connectivity: Optional[DeviceClientConnectivity] = Field(default=None, alias="clientConnectivity")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Lets you assign an identity to a device that is separate from human users, and use it as part of an ACL to restrict access. Once a device is tagged, the tag is the owner of that device. A single node can have multiple tags assigned. This value is empty for external devices. Learn more about tags at https://tailscale.com/kb/1068/. ")
    tailnet_lock_error: Optional[StrictStr] = Field(default=None, description="Indicates an issue with the tailnet lock node-key signature on this device. This field is only populated when tailnet lock is enabled. ", alias="tailnetLockError")
    tailnet_lock_key: Optional[StrictStr] = Field(default=None, description="The node's tailnet lock key. Every node generates a tailnet lock key (so the value will be present) even if tailnet lock is not enabled. Learn more about tailnet lock at https://tailscale.com/kb/1226/. ", alias="tailnetLockKey")
    posture_identity: Optional[DevicePostureIdentity] = Field(default=None, alias="postureIdentity")
    __properties: ClassVar[List[str]] = ["addresses", "id", "nodeId", "user", "name", "hostname", "clientVersion", "updateAvailable", "os", "created", "lastSeen", "keyExpiryDisabled", "expires", "authorized", "isExternal", "machineKey", "nodeKey", "blocksIncomingConnections", "enabledRoutes", "advertisedRoutes", "clientConnectivity", "tags", "tailnetLockError", "tailnetLockKey", "postureIdentity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Device from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_connectivity
        if self.client_connectivity:
            _dict['clientConnectivity'] = self.client_connectivity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of posture_identity
        if self.posture_identity:
            _dict['postureIdentity'] = self.posture_identity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Device from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addresses": obj.get("addresses"),
            "id": obj.get("id"),
            "nodeId": obj.get("nodeId"),
            "user": obj.get("user"),
            "name": obj.get("name"),
            "hostname": obj.get("hostname"),
            "clientVersion": obj.get("clientVersion"),
            "updateAvailable": obj.get("updateAvailable"),
            "os": obj.get("os"),
            "created": obj.get("created"),
            "lastSeen": obj.get("lastSeen"),
            "keyExpiryDisabled": obj.get("keyExpiryDisabled"),
            "expires": obj.get("expires"),
            "authorized": obj.get("authorized"),
            "isExternal": obj.get("isExternal"),
            "machineKey": obj.get("machineKey"),
            "nodeKey": obj.get("nodeKey"),
            "blocksIncomingConnections": obj.get("blocksIncomingConnections"),
            "enabledRoutes": obj.get("enabledRoutes"),
            "advertisedRoutes": obj.get("advertisedRoutes"),
            "clientConnectivity": DeviceClientConnectivity.from_dict(obj["clientConnectivity"]) if obj.get("clientConnectivity") is not None else None,
            "tags": obj.get("tags"),
            "tailnetLockError": obj.get("tailnetLockError"),
            "tailnetLockKey": obj.get("tailnetLockKey"),
            "postureIdentity": DevicePostureIdentity.from_dict(obj["postureIdentity"]) if obj.get("postureIdentity") is not None else None
        })
        return _obj



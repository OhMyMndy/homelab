# coding: utf-8

"""
    Tailscale API

    ### Overview  **The API endpoints documented here are stable. However, the OpenAPI spec used to generate this documentation is unstable. It may change or break without notice.**  The Tailscale API is a (mostly) RESTful API. Typically, both POST bodies and responses are JSON-encoded.  ### Base URL  The base URL for the Tailscale API is https://api.tailscale.com/api/v2/.  Examples in this document may abbreviate this to `/api/v2/`.  ### Authentication  Requests to the Tailscale API are authenticated with an API access token (sometimes called an API key). Access tokens can be supplied as the username portion of HTTP Basic authentication (leave the password blank) or as an OAuth Bearer token:  ``` // passing token with basic auth curl -u \"tskey-api-xxxxx:\" https://api.tailscale.com/api/v2/...  // passing token as bearer token curl -H \"Authorization: Bearer tskey-api-xxxxx\" https://api.tailscale.com/api/v2/... ```  Access tokens for individual users can be created and managed from the [Keys](https://login.tailscale.com/admin/settings/keys) page of the admin console. These tokens will have the same permissions as the owning user, and can be set to expire in 1 to 90 days. Access tokens are identifiable by the prefix tskey-api-.  Alternatively, an OAuth client can be used to create short-lived access tokens with scoped permission. OAuth clients don't expire, and can therefore be used to provide ongoing access to the API, creating access tokens as needed. OAuth clients and the access tokens they create are not tied to an individual Tailscale user. OAuth client secrets are identifiable by the prefix tskey-client-. Learn more about [OAuth clients].  [ OAuth clients ]: https://tailscale.com/kb/1215/  ### Errors  The Tailscale API returns status codes consistent with standard HTTP conventions. In addition to the status code, errors may include additional information in the response body:  ``` {   \"message\": \"additional error information\" } ```  ### Pagination  The Tailscale API does not currently support pagination. All results are returned at once.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class UserInvite(BaseModel):
    """
    A user invite is an active invitation that lets a user join a tailnet with a preassigned [user role](https://tailscale.com/kb/1138/user-roles).  Each user invite has a unique ID that is used to identify the invite in API calls. You can find all user invite IDs for a particular tailnet by [listing user invites](#tag/userinvites/get/tailnet/{tailnet}/user-invites). 
    """ # noqa: E501
    id: StrictStr = Field(description="The unique identifier for the invite. Supply this value wherever `userInviteId` is indicated in the endpoint. ")
    role: StrictStr = Field(description="The tailnet user role to assign to the invited user upon accepting the invite. ")
    tailnet_id: Union[StrictFloat, StrictInt] = Field(description="The ID of the tailnet to which the user was invited. ", alias="tailnetId")
    inviter_id: Union[StrictFloat, StrictInt] = Field(description="The ID of the user who created the invite. ", alias="inviterId")
    email: Optional[StrictStr] = Field(default=None, description="The email to which the invite was sent. If empty, the invite was not emailed to anyone, but the inviteUrl can be shared manually. ")
    last_email_sent_at: Optional[datetime] = Field(default=None, description="The last time the invite was attempted to be sent to Email. Only ever set if `email` is not empty. ", alias="lastEmailSentAt")
    invite_url: Optional[StrictStr] = Field(default=None, description="Included when `email` is not part of the tailnet's domain, or when `email` is empty. It is the link to accept the invite.  When included, anyone with this link can accept the invite. It is not restricted to the person to which the invite was emailed.  When `email` is part of the tailnet's domain (has the same @domain.com suffix as the tailnet), the user can join the tailnet automatically by logging in with their domain email at https://login.tailscale.com/start. They'll be assigned the specified `role` upon signing in for the first time. ", alias="inviteUrl")
    __properties: ClassVar[List[str]] = ["id", "role", "tailnetId", "inviterId", "email", "lastEmailSentAt", "inviteUrl"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['member', 'admin', 'it-admin', 'network-admin', 'billing-admin', 'auditor']):
            raise ValueError("must be one of enum values ('member', 'admin', 'it-admin', 'network-admin', 'billing-admin', 'auditor')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserInvite from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserInvite from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "role": obj.get("role"),
            "tailnetId": obj.get("tailnetId"),
            "inviterId": obj.get("inviterId"),
            "email": obj.get("email"),
            "lastEmailSentAt": obj.get("lastEmailSentAt"),
            "inviteUrl": obj.get("inviteUrl")
        })
        return _obj



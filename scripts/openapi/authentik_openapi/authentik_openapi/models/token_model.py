# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2024.6.4
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from authentik_openapi.models.o_auth2_provider import OAuth2Provider
from authentik_openapi.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class TokenModel(BaseModel):
    """
    Serializer for BaseGrantModel and RefreshToken
    """ # noqa: E501
    pk: StrictInt
    provider: OAuth2Provider
    user: User
    is_expired: StrictBool = Field(description="Check if token is expired yet.")
    expires: Optional[datetime] = None
    scope: List[StrictStr]
    id_token: StrictStr = Field(description="Get the token's id_token as JSON String")
    revoked: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["pk", "provider", "user", "is_expired", "expires", "scope", "id_token", "revoked"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TokenModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "pk",
            "is_expired",
            "id_token",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of provider
        if self.provider:
            _dict['provider'] = self.provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # set to None if expires (nullable) is None
        # and model_fields_set contains the field
        if self.expires is None and "expires" in self.model_fields_set:
            _dict['expires'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TokenModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pk": obj.get("pk"),
            "provider": OAuth2Provider.from_dict(obj["provider"]) if obj.get("provider") is not None else None,
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "is_expired": obj.get("is_expired"),
            "expires": obj.get("expires"),
            "scope": obj.get("scope"),
            "id_token": obj.get("id_token"),
            "revoked": obj.get("revoked")
        })
        return _obj



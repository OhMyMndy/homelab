# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2024.6.4
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from authentik_openapi.models.proxy_outpost_config import ProxyOutpostConfig

class TestProxyOutpostConfig(unittest.TestCase):
    """ProxyOutpostConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProxyOutpostConfig:
        """Test ProxyOutpostConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProxyOutpostConfig`
        """
        model = ProxyOutpostConfig()
        if include_optional:
            return ProxyOutpostConfig(
                pk = 56,
                name = '',
                internal_host = '',
                external_host = '',
                internal_host_ssl_validation = True,
                client_id = '',
                client_secret = '',
                oidc_configuration = authentik_openapi.models.open_id_connect_configuration.OpenIDConnectConfiguration(
                    issuer = '', 
                    authorization_endpoint = '', 
                    token_endpoint = '', 
                    userinfo_endpoint = '', 
                    end_session_endpoint = '', 
                    introspection_endpoint = '', 
                    jwks_uri = '', 
                    response_types_supported = [
                        ''
                        ], 
                    id_token_signing_alg_values_supported = [
                        ''
                        ], 
                    subject_types_supported = [
                        ''
                        ], 
                    token_endpoint_auth_methods_supported = [
                        ''
                        ], ),
                cookie_secret = '',
                certificate = '',
                skip_path_regex = '',
                basic_auth_enabled = True,
                basic_auth_password_attribute = '',
                basic_auth_user_attribute = '',
                mode = 'proxy',
                cookie_domain = '',
                access_token_validity = 1.337,
                intercept_header_auth = True,
                scopes_to_request = [
                    ''
                    ],
                assigned_application_slug = '',
                assigned_application_name = ''
            )
        else:
            return ProxyOutpostConfig(
                pk = 56,
                name = '',
                external_host = '',
                oidc_configuration = authentik_openapi.models.open_id_connect_configuration.OpenIDConnectConfiguration(
                    issuer = '', 
                    authorization_endpoint = '', 
                    token_endpoint = '', 
                    userinfo_endpoint = '', 
                    end_session_endpoint = '', 
                    introspection_endpoint = '', 
                    jwks_uri = '', 
                    response_types_supported = [
                        ''
                        ], 
                    id_token_signing_alg_values_supported = [
                        ''
                        ], 
                    subject_types_supported = [
                        ''
                        ], 
                    token_endpoint_auth_methods_supported = [
                        ''
                        ], ),
                access_token_validity = 1.337,
                scopes_to_request = [
                    ''
                    ],
                assigned_application_slug = '',
                assigned_application_name = '',
        )
        """

    def testProxyOutpostConfig(self):
        """Test ProxyOutpostConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2024.6.4
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from authentik_openapi.models.outpost import Outpost

class TestOutpost(unittest.TestCase):
    """Outpost unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Outpost:
        """Test Outpost
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Outpost`
        """
        model = Outpost()
        if include_optional:
            return Outpost(
                pk = '',
                name = '',
                type = 'proxy',
                providers = [
                    56
                    ],
                providers_obj = [
                    authentik_openapi.models.provider.Provider(
                        pk = 56, 
                        name = '', 
                        authentication_flow = '', 
                        authorization_flow = '', 
                        property_mappings = [
                            ''
                            ], 
                        component = '', 
                        assigned_application_slug = '', 
                        assigned_application_name = '', 
                        assigned_backchannel_application_slug = '', 
                        assigned_backchannel_application_name = '', 
                        verbose_name = '', 
                        verbose_name_plural = '', 
                        meta_model_name = '', )
                    ],
                service_connection = '',
                service_connection_obj = authentik_openapi.models.service_connection.ServiceConnection(
                    pk = '', 
                    name = '', 
                    local = True, 
                    component = '', 
                    verbose_name = '', 
                    verbose_name_plural = '', 
                    meta_model_name = '', ),
                refresh_interval_s = 56,
                token_identifier = '',
                config = {
                    'key' : null
                    },
                managed = ''
            )
        else:
            return Outpost(
                pk = '',
                name = '',
                type = 'proxy',
                providers = [
                    56
                    ],
                providers_obj = [
                    authentik_openapi.models.provider.Provider(
                        pk = 56, 
                        name = '', 
                        authentication_flow = '', 
                        authorization_flow = '', 
                        property_mappings = [
                            ''
                            ], 
                        component = '', 
                        assigned_application_slug = '', 
                        assigned_application_name = '', 
                        assigned_backchannel_application_slug = '', 
                        assigned_backchannel_application_name = '', 
                        verbose_name = '', 
                        verbose_name_plural = '', 
                        meta_model_name = '', )
                    ],
                service_connection_obj = authentik_openapi.models.service_connection.ServiceConnection(
                    pk = '', 
                    name = '', 
                    local = True, 
                    component = '', 
                    verbose_name = '', 
                    verbose_name_plural = '', 
                    meta_model_name = '', ),
                refresh_interval_s = 56,
                token_identifier = '',
                config = {
                    'key' : null
                    },
        )
        """

    def testOutpost(self):
        """Test Outpost"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2024.6.4
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from authentik_openapi.models.paginated_user_consent_list import PaginatedUserConsentList

class TestPaginatedUserConsentList(unittest.TestCase):
    """PaginatedUserConsentList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaginatedUserConsentList:
        """Test PaginatedUserConsentList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaginatedUserConsentList`
        """
        model = PaginatedUserConsentList()
        if include_optional:
            return PaginatedUserConsentList(
                pagination = authentik_openapi.models.pagination.Pagination(
                    next = 1.337, 
                    previous = 1.337, 
                    count = 1.337, 
                    current = 1.337, 
                    total_pages = 1.337, 
                    start_index = 1.337, 
                    end_index = 1.337, ),
                results = [
                    authentik_openapi.models.user_consent.UserConsent(
                        pk = 56, 
                        expires = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        expiring = True, 
                        user = authentik_openapi.models.user.User(
                            pk = 56, 
                            username = '', 
                            name = '', 
                            is_active = True, 
                            last_login = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            is_superuser = True, 
                            groups = [
                                ''
                                ], 
                            groups_obj = [
                                authentik_openapi.models.user_group.UserGroup(
                                    pk = '', 
                                    num_pk = 56, 
                                    name = '', 
                                    is_superuser = True, 
                                    parent = '', 
                                    parent_name = '', 
                                    attributes = {
                                        'key' : null
                                        }, )
                                ], 
                            email = '', 
                            avatar = '', 
                            attributes = {
                                'key' : null
                                }, 
                            uid = '', 
                            path = '', 
                            type = 'internal', 
                            uuid = '', ), 
                        application = authentik_openapi.models.application.Application(
                            pk = '', 
                            name = '', 
                            slug = 'z', 
                            provider = 56, 
                            provider_obj = null, 
                            backchannel_providers = [
                                56
                                ], 
                            backchannel_providers_obj = [
                                authentik_openapi.models.provider.Provider(
                                    pk = 56, 
                                    name = '', 
                                    authentication_flow = '', 
                                    authorization_flow = '', 
                                    property_mappings = [
                                        ''
                                        ], 
                                    component = '', 
                                    assigned_application_slug = '', 
                                    assigned_application_name = '', 
                                    assigned_backchannel_application_slug = '', 
                                    assigned_backchannel_application_name = '', 
                                    verbose_name = '', 
                                    verbose_name_plural = '', 
                                    meta_model_name = '', )
                                ], 
                            launch_url = '', 
                            open_in_new_tab = True, 
                            meta_launch_url = '', 
                            meta_icon = '', 
                            meta_description = '', 
                            meta_publisher = '', 
                            policy_engine_mode = 'all', 
                            group = '', ), 
                        permissions = '', )
                    ]
            )
        else:
            return PaginatedUserConsentList(
                pagination = authentik_openapi.models.pagination.Pagination(
                    next = 1.337, 
                    previous = 1.337, 
                    count = 1.337, 
                    current = 1.337, 
                    total_pages = 1.337, 
                    start_index = 1.337, 
                    end_index = 1.337, ),
                results = [
                    authentik_openapi.models.user_consent.UserConsent(
                        pk = 56, 
                        expires = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        expiring = True, 
                        user = authentik_openapi.models.user.User(
                            pk = 56, 
                            username = '', 
                            name = '', 
                            is_active = True, 
                            last_login = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            is_superuser = True, 
                            groups = [
                                ''
                                ], 
                            groups_obj = [
                                authentik_openapi.models.user_group.UserGroup(
                                    pk = '', 
                                    num_pk = 56, 
                                    name = '', 
                                    is_superuser = True, 
                                    parent = '', 
                                    parent_name = '', 
                                    attributes = {
                                        'key' : null
                                        }, )
                                ], 
                            email = '', 
                            avatar = '', 
                            attributes = {
                                'key' : null
                                }, 
                            uid = '', 
                            path = '', 
                            type = 'internal', 
                            uuid = '', ), 
                        application = authentik_openapi.models.application.Application(
                            pk = '', 
                            name = '', 
                            slug = 'z', 
                            provider = 56, 
                            provider_obj = null, 
                            backchannel_providers = [
                                56
                                ], 
                            backchannel_providers_obj = [
                                authentik_openapi.models.provider.Provider(
                                    pk = 56, 
                                    name = '', 
                                    authentication_flow = '', 
                                    authorization_flow = '', 
                                    property_mappings = [
                                        ''
                                        ], 
                                    component = '', 
                                    assigned_application_slug = '', 
                                    assigned_application_name = '', 
                                    assigned_backchannel_application_slug = '', 
                                    assigned_backchannel_application_name = '', 
                                    verbose_name = '', 
                                    verbose_name_plural = '', 
                                    meta_model_name = '', )
                                ], 
                            launch_url = '', 
                            open_in_new_tab = True, 
                            meta_launch_url = '', 
                            meta_icon = '', 
                            meta_description = '', 
                            meta_publisher = '', 
                            policy_engine_mode = 'all', 
                            group = '', ), 
                        permissions = '', )
                    ],
        )
        """

    def testPaginatedUserConsentList(self):
        """Test PaginatedUserConsentList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

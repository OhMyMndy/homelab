# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2024.6.4
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from authentik_openapi.models.proxy_provider import ProxyProvider

class TestProxyProvider(unittest.TestCase):
    """ProxyProvider unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProxyProvider:
        """Test ProxyProvider
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProxyProvider`
        """
        model = ProxyProvider()
        if include_optional:
            return ProxyProvider(
                pk = 56,
                name = '',
                authentication_flow = '',
                authorization_flow = '',
                property_mappings = [
                    ''
                    ],
                component = '',
                assigned_application_slug = '',
                assigned_application_name = '',
                assigned_backchannel_application_slug = '',
                assigned_backchannel_application_name = '',
                verbose_name = '',
                verbose_name_plural = '',
                meta_model_name = '',
                client_id = '',
                internal_host = '',
                external_host = '',
                internal_host_ssl_validation = True,
                certificate = '',
                skip_path_regex = '',
                basic_auth_enabled = True,
                basic_auth_password_attribute = '',
                basic_auth_user_attribute = '',
                mode = 'proxy',
                intercept_header_auth = True,
                redirect_uris = '',
                cookie_domain = '',
                jwks_sources = [
                    ''
                    ],
                access_token_validity = '',
                refresh_token_validity = '',
                outpost_set = [
                    ''
                    ]
            )
        else:
            return ProxyProvider(
                pk = 56,
                name = '',
                authorization_flow = '',
                component = '',
                assigned_application_slug = '',
                assigned_application_name = '',
                assigned_backchannel_application_slug = '',
                assigned_backchannel_application_name = '',
                verbose_name = '',
                verbose_name_plural = '',
                meta_model_name = '',
                client_id = '',
                external_host = '',
                redirect_uris = '',
                outpost_set = [
                    ''
                    ],
        )
        """

    def testProxyProvider(self):
        """Test ProxyProvider"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from github_openapi.models.repository_rule_detailed_one_of import RepositoryRuleDetailedOneOf
from github_openapi.models.repository_rule_detailed_one_of1 import RepositoryRuleDetailedOneOf1
from github_openapi.models.repository_rule_detailed_one_of10 import RepositoryRuleDetailedOneOf10
from github_openapi.models.repository_rule_detailed_one_of11 import RepositoryRuleDetailedOneOf11
from github_openapi.models.repository_rule_detailed_one_of12 import RepositoryRuleDetailedOneOf12
from github_openapi.models.repository_rule_detailed_one_of13 import RepositoryRuleDetailedOneOf13
from github_openapi.models.repository_rule_detailed_one_of14 import RepositoryRuleDetailedOneOf14
from github_openapi.models.repository_rule_detailed_one_of15 import RepositoryRuleDetailedOneOf15
from github_openapi.models.repository_rule_detailed_one_of16 import RepositoryRuleDetailedOneOf16
from github_openapi.models.repository_rule_detailed_one_of2 import RepositoryRuleDetailedOneOf2
from github_openapi.models.repository_rule_detailed_one_of3 import RepositoryRuleDetailedOneOf3
from github_openapi.models.repository_rule_detailed_one_of4 import RepositoryRuleDetailedOneOf4
from github_openapi.models.repository_rule_detailed_one_of5 import RepositoryRuleDetailedOneOf5
from github_openapi.models.repository_rule_detailed_one_of6 import RepositoryRuleDetailedOneOf6
from github_openapi.models.repository_rule_detailed_one_of7 import RepositoryRuleDetailedOneOf7
from github_openapi.models.repository_rule_detailed_one_of8 import RepositoryRuleDetailedOneOf8
from github_openapi.models.repository_rule_detailed_one_of9 import RepositoryRuleDetailedOneOf9
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

REPOSITORYRULEDETAILED_ONE_OF_SCHEMAS = ["RepositoryRuleDetailedOneOf", "RepositoryRuleDetailedOneOf1", "RepositoryRuleDetailedOneOf10", "RepositoryRuleDetailedOneOf11", "RepositoryRuleDetailedOneOf12", "RepositoryRuleDetailedOneOf13", "RepositoryRuleDetailedOneOf14", "RepositoryRuleDetailedOneOf15", "RepositoryRuleDetailedOneOf16", "RepositoryRuleDetailedOneOf2", "RepositoryRuleDetailedOneOf3", "RepositoryRuleDetailedOneOf4", "RepositoryRuleDetailedOneOf5", "RepositoryRuleDetailedOneOf6", "RepositoryRuleDetailedOneOf7", "RepositoryRuleDetailedOneOf8", "RepositoryRuleDetailedOneOf9"]

class RepositoryRuleDetailed(BaseModel):
    """
    A repository rule with ruleset details.
    """
    # data type: RepositoryRuleDetailedOneOf
    oneof_schema_1_validator: Optional[RepositoryRuleDetailedOneOf] = None
    # data type: RepositoryRuleDetailedOneOf1
    oneof_schema_2_validator: Optional[RepositoryRuleDetailedOneOf1] = None
    # data type: RepositoryRuleDetailedOneOf2
    oneof_schema_3_validator: Optional[RepositoryRuleDetailedOneOf2] = None
    # data type: RepositoryRuleDetailedOneOf3
    oneof_schema_4_validator: Optional[RepositoryRuleDetailedOneOf3] = None
    # data type: RepositoryRuleDetailedOneOf4
    oneof_schema_5_validator: Optional[RepositoryRuleDetailedOneOf4] = None
    # data type: RepositoryRuleDetailedOneOf5
    oneof_schema_6_validator: Optional[RepositoryRuleDetailedOneOf5] = None
    # data type: RepositoryRuleDetailedOneOf6
    oneof_schema_7_validator: Optional[RepositoryRuleDetailedOneOf6] = None
    # data type: RepositoryRuleDetailedOneOf7
    oneof_schema_8_validator: Optional[RepositoryRuleDetailedOneOf7] = None
    # data type: RepositoryRuleDetailedOneOf8
    oneof_schema_9_validator: Optional[RepositoryRuleDetailedOneOf8] = None
    # data type: RepositoryRuleDetailedOneOf9
    oneof_schema_10_validator: Optional[RepositoryRuleDetailedOneOf9] = None
    # data type: RepositoryRuleDetailedOneOf10
    oneof_schema_11_validator: Optional[RepositoryRuleDetailedOneOf10] = None
    # data type: RepositoryRuleDetailedOneOf11
    oneof_schema_12_validator: Optional[RepositoryRuleDetailedOneOf11] = None
    # data type: RepositoryRuleDetailedOneOf12
    oneof_schema_13_validator: Optional[RepositoryRuleDetailedOneOf12] = None
    # data type: RepositoryRuleDetailedOneOf13
    oneof_schema_14_validator: Optional[RepositoryRuleDetailedOneOf13] = None
    # data type: RepositoryRuleDetailedOneOf14
    oneof_schema_15_validator: Optional[RepositoryRuleDetailedOneOf14] = None
    # data type: RepositoryRuleDetailedOneOf15
    oneof_schema_16_validator: Optional[RepositoryRuleDetailedOneOf15] = None
    # data type: RepositoryRuleDetailedOneOf16
    oneof_schema_17_validator: Optional[RepositoryRuleDetailedOneOf16] = None
    actual_instance: Optional[Union[RepositoryRuleDetailedOneOf, RepositoryRuleDetailedOneOf1, RepositoryRuleDetailedOneOf10, RepositoryRuleDetailedOneOf11, RepositoryRuleDetailedOneOf12, RepositoryRuleDetailedOneOf13, RepositoryRuleDetailedOneOf14, RepositoryRuleDetailedOneOf15, RepositoryRuleDetailedOneOf16, RepositoryRuleDetailedOneOf2, RepositoryRuleDetailedOneOf3, RepositoryRuleDetailedOneOf4, RepositoryRuleDetailedOneOf5, RepositoryRuleDetailedOneOf6, RepositoryRuleDetailedOneOf7, RepositoryRuleDetailedOneOf8, RepositoryRuleDetailedOneOf9]] = None
    one_of_schemas: Set[str] = { "RepositoryRuleDetailedOneOf", "RepositoryRuleDetailedOneOf1", "RepositoryRuleDetailedOneOf10", "RepositoryRuleDetailedOneOf11", "RepositoryRuleDetailedOneOf12", "RepositoryRuleDetailedOneOf13", "RepositoryRuleDetailedOneOf14", "RepositoryRuleDetailedOneOf15", "RepositoryRuleDetailedOneOf16", "RepositoryRuleDetailedOneOf2", "RepositoryRuleDetailedOneOf3", "RepositoryRuleDetailedOneOf4", "RepositoryRuleDetailedOneOf5", "RepositoryRuleDetailedOneOf6", "RepositoryRuleDetailedOneOf7", "RepositoryRuleDetailedOneOf8", "RepositoryRuleDetailedOneOf9" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = RepositoryRuleDetailed.model_construct()
        error_messages = []
        match = 0
        # validate data type: RepositoryRuleDetailedOneOf
        if not isinstance(v, RepositoryRuleDetailedOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RepositoryRuleDetailedOneOf`")
        else:
            match += 1
        # validate data type: RepositoryRuleDetailedOneOf1
        if not isinstance(v, RepositoryRuleDetailedOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RepositoryRuleDetailedOneOf1`")
        else:
            match += 1
        # validate data type: RepositoryRuleDetailedOneOf2
        if not isinstance(v, RepositoryRuleDetailedOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RepositoryRuleDetailedOneOf2`")
        else:
            match += 1
        # validate data type: RepositoryRuleDetailedOneOf3
        if not isinstance(v, RepositoryRuleDetailedOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RepositoryRuleDetailedOneOf3`")
        else:
            match += 1
        # validate data type: RepositoryRuleDetailedOneOf4
        if not isinstance(v, RepositoryRuleDetailedOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RepositoryRuleDetailedOneOf4`")
        else:
            match += 1
        # validate data type: RepositoryRuleDetailedOneOf5
        if not isinstance(v, RepositoryRuleDetailedOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RepositoryRuleDetailedOneOf5`")
        else:
            match += 1
        # validate data type: RepositoryRuleDetailedOneOf6
        if not isinstance(v, RepositoryRuleDetailedOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RepositoryRuleDetailedOneOf6`")
        else:
            match += 1
        # validate data type: RepositoryRuleDetailedOneOf7
        if not isinstance(v, RepositoryRuleDetailedOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RepositoryRuleDetailedOneOf7`")
        else:
            match += 1
        # validate data type: RepositoryRuleDetailedOneOf8
        if not isinstance(v, RepositoryRuleDetailedOneOf8):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RepositoryRuleDetailedOneOf8`")
        else:
            match += 1
        # validate data type: RepositoryRuleDetailedOneOf9
        if not isinstance(v, RepositoryRuleDetailedOneOf9):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RepositoryRuleDetailedOneOf9`")
        else:
            match += 1
        # validate data type: RepositoryRuleDetailedOneOf10
        if not isinstance(v, RepositoryRuleDetailedOneOf10):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RepositoryRuleDetailedOneOf10`")
        else:
            match += 1
        # validate data type: RepositoryRuleDetailedOneOf11
        if not isinstance(v, RepositoryRuleDetailedOneOf11):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RepositoryRuleDetailedOneOf11`")
        else:
            match += 1
        # validate data type: RepositoryRuleDetailedOneOf12
        if not isinstance(v, RepositoryRuleDetailedOneOf12):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RepositoryRuleDetailedOneOf12`")
        else:
            match += 1
        # validate data type: RepositoryRuleDetailedOneOf13
        if not isinstance(v, RepositoryRuleDetailedOneOf13):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RepositoryRuleDetailedOneOf13`")
        else:
            match += 1
        # validate data type: RepositoryRuleDetailedOneOf14
        if not isinstance(v, RepositoryRuleDetailedOneOf14):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RepositoryRuleDetailedOneOf14`")
        else:
            match += 1
        # validate data type: RepositoryRuleDetailedOneOf15
        if not isinstance(v, RepositoryRuleDetailedOneOf15):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RepositoryRuleDetailedOneOf15`")
        else:
            match += 1
        # validate data type: RepositoryRuleDetailedOneOf16
        if not isinstance(v, RepositoryRuleDetailedOneOf16):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RepositoryRuleDetailedOneOf16`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in RepositoryRuleDetailed with oneOf schemas: RepositoryRuleDetailedOneOf, RepositoryRuleDetailedOneOf1, RepositoryRuleDetailedOneOf10, RepositoryRuleDetailedOneOf11, RepositoryRuleDetailedOneOf12, RepositoryRuleDetailedOneOf13, RepositoryRuleDetailedOneOf14, RepositoryRuleDetailedOneOf15, RepositoryRuleDetailedOneOf16, RepositoryRuleDetailedOneOf2, RepositoryRuleDetailedOneOf3, RepositoryRuleDetailedOneOf4, RepositoryRuleDetailedOneOf5, RepositoryRuleDetailedOneOf6, RepositoryRuleDetailedOneOf7, RepositoryRuleDetailedOneOf8, RepositoryRuleDetailedOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in RepositoryRuleDetailed with oneOf schemas: RepositoryRuleDetailedOneOf, RepositoryRuleDetailedOneOf1, RepositoryRuleDetailedOneOf10, RepositoryRuleDetailedOneOf11, RepositoryRuleDetailedOneOf12, RepositoryRuleDetailedOneOf13, RepositoryRuleDetailedOneOf14, RepositoryRuleDetailedOneOf15, RepositoryRuleDetailedOneOf16, RepositoryRuleDetailedOneOf2, RepositoryRuleDetailedOneOf3, RepositoryRuleDetailedOneOf4, RepositoryRuleDetailedOneOf5, RepositoryRuleDetailedOneOf6, RepositoryRuleDetailedOneOf7, RepositoryRuleDetailedOneOf8, RepositoryRuleDetailedOneOf9. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into RepositoryRuleDetailedOneOf
        try:
            instance.actual_instance = RepositoryRuleDetailedOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RepositoryRuleDetailedOneOf1
        try:
            instance.actual_instance = RepositoryRuleDetailedOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RepositoryRuleDetailedOneOf2
        try:
            instance.actual_instance = RepositoryRuleDetailedOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RepositoryRuleDetailedOneOf3
        try:
            instance.actual_instance = RepositoryRuleDetailedOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RepositoryRuleDetailedOneOf4
        try:
            instance.actual_instance = RepositoryRuleDetailedOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RepositoryRuleDetailedOneOf5
        try:
            instance.actual_instance = RepositoryRuleDetailedOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RepositoryRuleDetailedOneOf6
        try:
            instance.actual_instance = RepositoryRuleDetailedOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RepositoryRuleDetailedOneOf7
        try:
            instance.actual_instance = RepositoryRuleDetailedOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RepositoryRuleDetailedOneOf8
        try:
            instance.actual_instance = RepositoryRuleDetailedOneOf8.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RepositoryRuleDetailedOneOf9
        try:
            instance.actual_instance = RepositoryRuleDetailedOneOf9.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RepositoryRuleDetailedOneOf10
        try:
            instance.actual_instance = RepositoryRuleDetailedOneOf10.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RepositoryRuleDetailedOneOf11
        try:
            instance.actual_instance = RepositoryRuleDetailedOneOf11.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RepositoryRuleDetailedOneOf12
        try:
            instance.actual_instance = RepositoryRuleDetailedOneOf12.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RepositoryRuleDetailedOneOf13
        try:
            instance.actual_instance = RepositoryRuleDetailedOneOf13.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RepositoryRuleDetailedOneOf14
        try:
            instance.actual_instance = RepositoryRuleDetailedOneOf14.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RepositoryRuleDetailedOneOf15
        try:
            instance.actual_instance = RepositoryRuleDetailedOneOf15.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RepositoryRuleDetailedOneOf16
        try:
            instance.actual_instance = RepositoryRuleDetailedOneOf16.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into RepositoryRuleDetailed with oneOf schemas: RepositoryRuleDetailedOneOf, RepositoryRuleDetailedOneOf1, RepositoryRuleDetailedOneOf10, RepositoryRuleDetailedOneOf11, RepositoryRuleDetailedOneOf12, RepositoryRuleDetailedOneOf13, RepositoryRuleDetailedOneOf14, RepositoryRuleDetailedOneOf15, RepositoryRuleDetailedOneOf16, RepositoryRuleDetailedOneOf2, RepositoryRuleDetailedOneOf3, RepositoryRuleDetailedOneOf4, RepositoryRuleDetailedOneOf5, RepositoryRuleDetailedOneOf6, RepositoryRuleDetailedOneOf7, RepositoryRuleDetailedOneOf8, RepositoryRuleDetailedOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into RepositoryRuleDetailed with oneOf schemas: RepositoryRuleDetailedOneOf, RepositoryRuleDetailedOneOf1, RepositoryRuleDetailedOneOf10, RepositoryRuleDetailedOneOf11, RepositoryRuleDetailedOneOf12, RepositoryRuleDetailedOneOf13, RepositoryRuleDetailedOneOf14, RepositoryRuleDetailedOneOf15, RepositoryRuleDetailedOneOf16, RepositoryRuleDetailedOneOf2, RepositoryRuleDetailedOneOf3, RepositoryRuleDetailedOneOf4, RepositoryRuleDetailedOneOf5, RepositoryRuleDetailedOneOf6, RepositoryRuleDetailedOneOf7, RepositoryRuleDetailedOneOf8, RepositoryRuleDetailedOneOf9. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], RepositoryRuleDetailedOneOf, RepositoryRuleDetailedOneOf1, RepositoryRuleDetailedOneOf10, RepositoryRuleDetailedOneOf11, RepositoryRuleDetailedOneOf12, RepositoryRuleDetailedOneOf13, RepositoryRuleDetailedOneOf14, RepositoryRuleDetailedOneOf15, RepositoryRuleDetailedOneOf16, RepositoryRuleDetailedOneOf2, RepositoryRuleDetailedOneOf3, RepositoryRuleDetailedOneOf4, RepositoryRuleDetailedOneOf5, RepositoryRuleDetailedOneOf6, RepositoryRuleDetailedOneOf7, RepositoryRuleDetailedOneOf8, RepositoryRuleDetailedOneOf9]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



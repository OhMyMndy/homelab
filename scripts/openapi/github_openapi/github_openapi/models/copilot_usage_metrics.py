# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from github_openapi.models.copilot_usage_metrics_breakdown_inner import CopilotUsageMetricsBreakdownInner
from typing import Optional, Set
from typing_extensions import Self

class CopilotUsageMetrics(BaseModel):
    """
    Summary of Copilot usage.
    """ # noqa: E501
    day: date = Field(description="The date for which the usage metrics are reported, in `YYYY-MM-DD` format.")
    total_suggestions_count: Optional[StrictInt] = Field(default=None, description="The total number of Copilot code completion suggestions shown to users.")
    total_acceptances_count: Optional[StrictInt] = Field(default=None, description="The total number of Copilot code completion suggestions accepted by users.")
    total_lines_suggested: Optional[StrictInt] = Field(default=None, description="The total number of lines of code completions suggested by Copilot.")
    total_lines_accepted: Optional[StrictInt] = Field(default=None, description="The total number of lines of code completions accepted by users.")
    total_active_users: Optional[StrictInt] = Field(default=None, description="The total number of users who were shown Copilot code completion suggestions during the day specified.")
    total_chat_acceptances: Optional[StrictInt] = Field(default=None, description="The total instances of users who accepted code suggested by Copilot Chat in the IDE (panel and inline).")
    total_chat_turns: Optional[StrictInt] = Field(default=None, description="The total number of chat turns (prompt and response pairs) sent between users and Copilot Chat in the IDE.")
    total_active_chat_users: Optional[StrictInt] = Field(default=None, description="The total number of users who interacted with Copilot Chat in the IDE during the day specified.")
    breakdown: Optional[List[CopilotUsageMetricsBreakdownInner]] = Field(description="Breakdown of Copilot code completions usage by language and editor")
    __properties: ClassVar[List[str]] = ["day", "total_suggestions_count", "total_acceptances_count", "total_lines_suggested", "total_lines_accepted", "total_active_users", "total_chat_acceptances", "total_chat_turns", "total_active_chat_users", "breakdown"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CopilotUsageMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in breakdown (list)
        _items = []
        if self.breakdown:
            for _item_breakdown in self.breakdown:
                if _item_breakdown:
                    _items.append(_item_breakdown.to_dict())
            _dict['breakdown'] = _items
        # set to None if breakdown (nullable) is None
        # and model_fields_set contains the field
        if self.breakdown is None and "breakdown" in self.model_fields_set:
            _dict['breakdown'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CopilotUsageMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "day": obj.get("day"),
            "total_suggestions_count": obj.get("total_suggestions_count"),
            "total_acceptances_count": obj.get("total_acceptances_count"),
            "total_lines_suggested": obj.get("total_lines_suggested"),
            "total_lines_accepted": obj.get("total_lines_accepted"),
            "total_active_users": obj.get("total_active_users"),
            "total_chat_acceptances": obj.get("total_chat_acceptances"),
            "total_chat_turns": obj.get("total_chat_turns"),
            "total_active_chat_users": obj.get("total_active_chat_users"),
            "breakdown": [CopilotUsageMetricsBreakdownInner.from_dict(_item) for _item in obj["breakdown"]] if obj.get("breakdown") is not None else None
        })
        return _obj



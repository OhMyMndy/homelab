# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from github_openapi.models.rate_limit import RateLimit
from typing import Optional, Set
from typing_extensions import Self

class RateLimitOverviewResources(BaseModel):
    """
    RateLimitOverviewResources
    """ # noqa: E501
    core: RateLimit
    graphql: Optional[RateLimit] = None
    search: RateLimit
    code_search: Optional[RateLimit] = None
    source_import: Optional[RateLimit] = None
    integration_manifest: Optional[RateLimit] = None
    code_scanning_upload: Optional[RateLimit] = None
    actions_runner_registration: Optional[RateLimit] = None
    scim: Optional[RateLimit] = None
    dependency_snapshots: Optional[RateLimit] = None
    code_scanning_autofix: Optional[RateLimit] = None
    __properties: ClassVar[List[str]] = ["core", "graphql", "search", "code_search", "source_import", "integration_manifest", "code_scanning_upload", "actions_runner_registration", "scim", "dependency_snapshots", "code_scanning_autofix"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RateLimitOverviewResources from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of core
        if self.core:
            _dict['core'] = self.core.to_dict()
        # override the default output from pydantic by calling `to_dict()` of graphql
        if self.graphql:
            _dict['graphql'] = self.graphql.to_dict()
        # override the default output from pydantic by calling `to_dict()` of search
        if self.search:
            _dict['search'] = self.search.to_dict()
        # override the default output from pydantic by calling `to_dict()` of code_search
        if self.code_search:
            _dict['code_search'] = self.code_search.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_import
        if self.source_import:
            _dict['source_import'] = self.source_import.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integration_manifest
        if self.integration_manifest:
            _dict['integration_manifest'] = self.integration_manifest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of code_scanning_upload
        if self.code_scanning_upload:
            _dict['code_scanning_upload'] = self.code_scanning_upload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of actions_runner_registration
        if self.actions_runner_registration:
            _dict['actions_runner_registration'] = self.actions_runner_registration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scim
        if self.scim:
            _dict['scim'] = self.scim.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dependency_snapshots
        if self.dependency_snapshots:
            _dict['dependency_snapshots'] = self.dependency_snapshots.to_dict()
        # override the default output from pydantic by calling `to_dict()` of code_scanning_autofix
        if self.code_scanning_autofix:
            _dict['code_scanning_autofix'] = self.code_scanning_autofix.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RateLimitOverviewResources from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "core": RateLimit.from_dict(obj["core"]) if obj.get("core") is not None else None,
            "graphql": RateLimit.from_dict(obj["graphql"]) if obj.get("graphql") is not None else None,
            "search": RateLimit.from_dict(obj["search"]) if obj.get("search") is not None else None,
            "code_search": RateLimit.from_dict(obj["code_search"]) if obj.get("code_search") is not None else None,
            "source_import": RateLimit.from_dict(obj["source_import"]) if obj.get("source_import") is not None else None,
            "integration_manifest": RateLimit.from_dict(obj["integration_manifest"]) if obj.get("integration_manifest") is not None else None,
            "code_scanning_upload": RateLimit.from_dict(obj["code_scanning_upload"]) if obj.get("code_scanning_upload") is not None else None,
            "actions_runner_registration": RateLimit.from_dict(obj["actions_runner_registration"]) if obj.get("actions_runner_registration") is not None else None,
            "scim": RateLimit.from_dict(obj["scim"]) if obj.get("scim") is not None else None,
            "dependency_snapshots": RateLimit.from_dict(obj["dependency_snapshots"]) if obj.get("dependency_snapshots") is not None else None,
            "code_scanning_autofix": RateLimit.from_dict(obj["code_scanning_autofix"]) if obj.get("code_scanning_autofix") is not None else None
        })
        return _obj



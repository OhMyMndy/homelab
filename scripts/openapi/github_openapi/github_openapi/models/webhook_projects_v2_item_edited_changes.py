# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from github_openapi.models.webhook_projects_v2_item_edited_changes_one_of import WebhookProjectsV2ItemEditedChangesOneOf
from github_openapi.models.webhook_projects_v2_item_edited_changes_one_of1 import WebhookProjectsV2ItemEditedChangesOneOf1
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

WEBHOOKPROJECTSV2ITEMEDITEDCHANGES_ONE_OF_SCHEMAS = ["WebhookProjectsV2ItemEditedChangesOneOf", "WebhookProjectsV2ItemEditedChangesOneOf1"]

class WebhookProjectsV2ItemEditedChanges(BaseModel):
    """
    The changes made to the item may involve modifications in the item's fields and draft issue body. It includes altered values for text, number, date, single select, and iteration fields, along with the GraphQL node ID of the changed field.
    """
    # data type: WebhookProjectsV2ItemEditedChangesOneOf
    oneof_schema_1_validator: Optional[WebhookProjectsV2ItemEditedChangesOneOf] = None
    # data type: WebhookProjectsV2ItemEditedChangesOneOf1
    oneof_schema_2_validator: Optional[WebhookProjectsV2ItemEditedChangesOneOf1] = None
    actual_instance: Optional[Union[WebhookProjectsV2ItemEditedChangesOneOf, WebhookProjectsV2ItemEditedChangesOneOf1]] = None
    one_of_schemas: Set[str] = { "WebhookProjectsV2ItemEditedChangesOneOf", "WebhookProjectsV2ItemEditedChangesOneOf1" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = WebhookProjectsV2ItemEditedChanges.model_construct()
        error_messages = []
        match = 0
        # validate data type: WebhookProjectsV2ItemEditedChangesOneOf
        if not isinstance(v, WebhookProjectsV2ItemEditedChangesOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WebhookProjectsV2ItemEditedChangesOneOf`")
        else:
            match += 1
        # validate data type: WebhookProjectsV2ItemEditedChangesOneOf1
        if not isinstance(v, WebhookProjectsV2ItemEditedChangesOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WebhookProjectsV2ItemEditedChangesOneOf1`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in WebhookProjectsV2ItemEditedChanges with oneOf schemas: WebhookProjectsV2ItemEditedChangesOneOf, WebhookProjectsV2ItemEditedChangesOneOf1. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in WebhookProjectsV2ItemEditedChanges with oneOf schemas: WebhookProjectsV2ItemEditedChangesOneOf, WebhookProjectsV2ItemEditedChangesOneOf1. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into WebhookProjectsV2ItemEditedChangesOneOf
        try:
            instance.actual_instance = WebhookProjectsV2ItemEditedChangesOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WebhookProjectsV2ItemEditedChangesOneOf1
        try:
            instance.actual_instance = WebhookProjectsV2ItemEditedChangesOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into WebhookProjectsV2ItemEditedChanges with oneOf schemas: WebhookProjectsV2ItemEditedChangesOneOf, WebhookProjectsV2ItemEditedChangesOneOf1. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into WebhookProjectsV2ItemEditedChanges with oneOf schemas: WebhookProjectsV2ItemEditedChangesOneOf, WebhookProjectsV2ItemEditedChangesOneOf1. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], WebhookProjectsV2ItemEditedChangesOneOf, WebhookProjectsV2ItemEditedChangesOneOf1]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiInsightsUserStatsInner(BaseModel):
    """
    ApiInsightsUserStatsInner
    """ # noqa: E501
    actor_type: Optional[StrictStr] = None
    actor_name: Optional[StrictStr] = None
    actor_id: Optional[StrictInt] = None
    integration_id: Optional[StrictInt] = None
    oauth_application_id: Optional[StrictInt] = None
    total_request_count: Optional[StrictInt] = None
    rate_limited_request_count: Optional[StrictInt] = None
    last_rate_limited_timestamp: Optional[StrictStr] = None
    last_request_timestamp: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["actor_type", "actor_name", "actor_id", "integration_id", "oauth_application_id", "total_request_count", "rate_limited_request_count", "last_rate_limited_timestamp", "last_request_timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiInsightsUserStatsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if integration_id (nullable) is None
        # and model_fields_set contains the field
        if self.integration_id is None and "integration_id" in self.model_fields_set:
            _dict['integration_id'] = None

        # set to None if oauth_application_id (nullable) is None
        # and model_fields_set contains the field
        if self.oauth_application_id is None and "oauth_application_id" in self.model_fields_set:
            _dict['oauth_application_id'] = None

        # set to None if last_rate_limited_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.last_rate_limited_timestamp is None and "last_rate_limited_timestamp" in self.model_fields_set:
            _dict['last_rate_limited_timestamp'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiInsightsUserStatsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actor_type": obj.get("actor_type"),
            "actor_name": obj.get("actor_name"),
            "actor_id": obj.get("actor_id"),
            "integration_id": obj.get("integration_id"),
            "oauth_application_id": obj.get("oauth_application_id"),
            "total_request_count": obj.get("total_request_count"),
            "rate_limited_request_count": obj.get("rate_limited_request_count"),
            "last_rate_limited_timestamp": obj.get("last_rate_limited_timestamp"),
            "last_request_timestamp": obj.get("last_request_timestamp")
        })
        return _obj



# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from github_openapi.models.webhooks_security_advisory_vulnerabilities_inner_first_patched_version import WebhooksSecurityAdvisoryVulnerabilitiesInnerFirstPatchedVersion
from github_openapi.models.webhooks_security_advisory_vulnerabilities_inner_package import WebhooksSecurityAdvisoryVulnerabilitiesInnerPackage
from typing import Optional, Set
from typing_extensions import Self

class WebhooksSecurityAdvisoryVulnerabilitiesInner(BaseModel):
    """
    WebhooksSecurityAdvisoryVulnerabilitiesInner
    """ # noqa: E501
    first_patched_version: Optional[WebhooksSecurityAdvisoryVulnerabilitiesInnerFirstPatchedVersion]
    package: WebhooksSecurityAdvisoryVulnerabilitiesInnerPackage
    severity: StrictStr
    vulnerable_version_range: StrictStr
    __properties: ClassVar[List[str]] = ["first_patched_version", "package", "severity", "vulnerable_version_range"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhooksSecurityAdvisoryVulnerabilitiesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of first_patched_version
        if self.first_patched_version:
            _dict['first_patched_version'] = self.first_patched_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of package
        if self.package:
            _dict['package'] = self.package.to_dict()
        # set to None if first_patched_version (nullable) is None
        # and model_fields_set contains the field
        if self.first_patched_version is None and "first_patched_version" in self.model_fields_set:
            _dict['first_patched_version'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhooksSecurityAdvisoryVulnerabilitiesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first_patched_version": WebhooksSecurityAdvisoryVulnerabilitiesInnerFirstPatchedVersion.from_dict(obj["first_patched_version"]) if obj.get("first_patched_version") is not None else None,
            "package": WebhooksSecurityAdvisoryVulnerabilitiesInnerPackage.from_dict(obj["package"]) if obj.get("package") is not None else None,
            "severity": obj.get("severity"),
            "vulnerable_version_range": obj.get("vulnerable_version_range")
        })
        return _obj



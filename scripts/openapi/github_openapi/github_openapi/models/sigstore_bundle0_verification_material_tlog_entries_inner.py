# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from github_openapi.models.sigstore_bundle0_verification_material_tlog_entries_inner_inclusion_promise import SigstoreBundle0VerificationMaterialTlogEntriesInnerInclusionPromise
from github_openapi.models.sigstore_bundle0_verification_material_tlog_entries_inner_kind_version import SigstoreBundle0VerificationMaterialTlogEntriesInnerKindVersion
from github_openapi.models.sigstore_bundle0_verification_material_tlog_entries_inner_log_id import SigstoreBundle0VerificationMaterialTlogEntriesInnerLogId
from typing import Optional, Set
from typing_extensions import Self

class SigstoreBundle0VerificationMaterialTlogEntriesInner(BaseModel):
    """
    SigstoreBundle0VerificationMaterialTlogEntriesInner
    """ # noqa: E501
    log_index: Optional[StrictStr] = Field(default=None, alias="logIndex")
    log_id: Optional[SigstoreBundle0VerificationMaterialTlogEntriesInnerLogId] = Field(default=None, alias="logId")
    kind_version: Optional[SigstoreBundle0VerificationMaterialTlogEntriesInnerKindVersion] = Field(default=None, alias="kindVersion")
    integrated_time: Optional[StrictStr] = Field(default=None, alias="integratedTime")
    inclusion_promise: Optional[SigstoreBundle0VerificationMaterialTlogEntriesInnerInclusionPromise] = Field(default=None, alias="inclusionPromise")
    inclusion_proof: Optional[StrictStr] = Field(default=None, alias="inclusionProof")
    canonicalized_body: Optional[StrictStr] = Field(default=None, alias="canonicalizedBody")
    __properties: ClassVar[List[str]] = ["logIndex", "logId", "kindVersion", "integratedTime", "inclusionPromise", "inclusionProof", "canonicalizedBody"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SigstoreBundle0VerificationMaterialTlogEntriesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of log_id
        if self.log_id:
            _dict['logId'] = self.log_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kind_version
        if self.kind_version:
            _dict['kindVersion'] = self.kind_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inclusion_promise
        if self.inclusion_promise:
            _dict['inclusionPromise'] = self.inclusion_promise.to_dict()
        # set to None if inclusion_proof (nullable) is None
        # and model_fields_set contains the field
        if self.inclusion_proof is None and "inclusion_proof" in self.model_fields_set:
            _dict['inclusionProof'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SigstoreBundle0VerificationMaterialTlogEntriesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "logIndex": obj.get("logIndex"),
            "logId": SigstoreBundle0VerificationMaterialTlogEntriesInnerLogId.from_dict(obj["logId"]) if obj.get("logId") is not None else None,
            "kindVersion": SigstoreBundle0VerificationMaterialTlogEntriesInnerKindVersion.from_dict(obj["kindVersion"]) if obj.get("kindVersion") is not None else None,
            "integratedTime": obj.get("integratedTime"),
            "inclusionPromise": SigstoreBundle0VerificationMaterialTlogEntriesInnerInclusionPromise.from_dict(obj["inclusionPromise"]) if obj.get("inclusionPromise") is not None else None,
            "inclusionProof": obj.get("inclusionProof"),
            "canonicalizedBody": obj.get("canonicalizedBody")
        })
        return _obj



# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from github_openapi.models.author_association import AuthorAssociation
from github_openapi.models.issue_labels_inner import IssueLabelsInner
from github_openapi.models.issue_pull_request import IssuePullRequest
from github_openapi.models.nullable_integration import NullableIntegration
from github_openapi.models.nullable_milestone import NullableMilestone
from github_openapi.models.nullable_simple_user import NullableSimpleUser
from github_openapi.models.reaction_rollup import ReactionRollup
from github_openapi.models.repository import Repository
from github_openapi.models.simple_user import SimpleUser
from github_openapi.models.sub_issues_summary import SubIssuesSummary
from typing import Optional, Set
from typing_extensions import Self

class NullableIssue(BaseModel):
    """
    Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
    """ # noqa: E501
    id: StrictInt
    node_id: StrictStr
    url: StrictStr = Field(description="URL for the issue")
    repository_url: StrictStr
    labels_url: StrictStr
    comments_url: StrictStr
    events_url: StrictStr
    html_url: StrictStr
    number: StrictInt = Field(description="Number uniquely identifying the issue within its repository")
    state: StrictStr = Field(description="State of the issue; either 'open' or 'closed'")
    state_reason: Optional[StrictStr] = Field(default=None, description="The reason for the current state")
    title: StrictStr = Field(description="Title of the issue")
    body: Optional[StrictStr] = Field(default=None, description="Contents of the issue")
    user: Optional[NullableSimpleUser]
    labels: List[IssueLabelsInner] = Field(description="Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository")
    assignee: Optional[NullableSimpleUser]
    assignees: Optional[List[SimpleUser]] = None
    milestone: Optional[NullableMilestone]
    locked: StrictBool
    active_lock_reason: Optional[StrictStr] = None
    comments: StrictInt
    pull_request: Optional[IssuePullRequest] = None
    closed_at: Optional[datetime]
    created_at: datetime
    updated_at: datetime
    draft: Optional[StrictBool] = None
    closed_by: Optional[NullableSimpleUser] = None
    body_html: Optional[StrictStr] = None
    body_text: Optional[StrictStr] = None
    timeline_url: Optional[StrictStr] = None
    repository: Optional[Repository] = None
    performed_via_github_app: Optional[NullableIntegration] = None
    author_association: AuthorAssociation
    reactions: Optional[ReactionRollup] = None
    sub_issues_summary: Optional[SubIssuesSummary] = None
    __properties: ClassVar[List[str]] = ["id", "node_id", "url", "repository_url", "labels_url", "comments_url", "events_url", "html_url", "number", "state", "state_reason", "title", "body", "user", "labels", "assignee", "assignees", "milestone", "locked", "active_lock_reason", "comments", "pull_request", "closed_at", "created_at", "updated_at", "draft", "closed_by", "body_html", "body_text", "timeline_url", "repository", "performed_via_github_app", "author_association", "reactions", "sub_issues_summary"]

    @field_validator('state_reason')
    def state_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['completed', 'reopened', 'not_planned']):
            raise ValueError("must be one of enum values ('completed', 'reopened', 'not_planned')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NullableIssue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of assignee
        if self.assignee:
            _dict['assignee'] = self.assignee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in assignees (list)
        _items = []
        if self.assignees:
            for _item_assignees in self.assignees:
                if _item_assignees:
                    _items.append(_item_assignees.to_dict())
            _dict['assignees'] = _items
        # override the default output from pydantic by calling `to_dict()` of milestone
        if self.milestone:
            _dict['milestone'] = self.milestone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pull_request
        if self.pull_request:
            _dict['pull_request'] = self.pull_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of closed_by
        if self.closed_by:
            _dict['closed_by'] = self.closed_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repository
        if self.repository:
            _dict['repository'] = self.repository.to_dict()
        # override the default output from pydantic by calling `to_dict()` of performed_via_github_app
        if self.performed_via_github_app:
            _dict['performed_via_github_app'] = self.performed_via_github_app.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reactions
        if self.reactions:
            _dict['reactions'] = self.reactions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_issues_summary
        if self.sub_issues_summary:
            _dict['sub_issues_summary'] = self.sub_issues_summary.to_dict()
        # set to None if state_reason (nullable) is None
        # and model_fields_set contains the field
        if self.state_reason is None and "state_reason" in self.model_fields_set:
            _dict['state_reason'] = None

        # set to None if body (nullable) is None
        # and model_fields_set contains the field
        if self.body is None and "body" in self.model_fields_set:
            _dict['body'] = None

        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict['user'] = None

        # set to None if assignee (nullable) is None
        # and model_fields_set contains the field
        if self.assignee is None and "assignee" in self.model_fields_set:
            _dict['assignee'] = None

        # set to None if assignees (nullable) is None
        # and model_fields_set contains the field
        if self.assignees is None and "assignees" in self.model_fields_set:
            _dict['assignees'] = None

        # set to None if milestone (nullable) is None
        # and model_fields_set contains the field
        if self.milestone is None and "milestone" in self.model_fields_set:
            _dict['milestone'] = None

        # set to None if active_lock_reason (nullable) is None
        # and model_fields_set contains the field
        if self.active_lock_reason is None and "active_lock_reason" in self.model_fields_set:
            _dict['active_lock_reason'] = None

        # set to None if closed_at (nullable) is None
        # and model_fields_set contains the field
        if self.closed_at is None and "closed_at" in self.model_fields_set:
            _dict['closed_at'] = None

        # set to None if closed_by (nullable) is None
        # and model_fields_set contains the field
        if self.closed_by is None and "closed_by" in self.model_fields_set:
            _dict['closed_by'] = None

        # set to None if performed_via_github_app (nullable) is None
        # and model_fields_set contains the field
        if self.performed_via_github_app is None and "performed_via_github_app" in self.model_fields_set:
            _dict['performed_via_github_app'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NullableIssue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "node_id": obj.get("node_id"),
            "url": obj.get("url"),
            "repository_url": obj.get("repository_url"),
            "labels_url": obj.get("labels_url"),
            "comments_url": obj.get("comments_url"),
            "events_url": obj.get("events_url"),
            "html_url": obj.get("html_url"),
            "number": obj.get("number"),
            "state": obj.get("state"),
            "state_reason": obj.get("state_reason"),
            "title": obj.get("title"),
            "body": obj.get("body"),
            "user": NullableSimpleUser.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "labels": [IssueLabelsInner.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "assignee": NullableSimpleUser.from_dict(obj["assignee"]) if obj.get("assignee") is not None else None,
            "assignees": [SimpleUser.from_dict(_item) for _item in obj["assignees"]] if obj.get("assignees") is not None else None,
            "milestone": NullableMilestone.from_dict(obj["milestone"]) if obj.get("milestone") is not None else None,
            "locked": obj.get("locked"),
            "active_lock_reason": obj.get("active_lock_reason"),
            "comments": obj.get("comments"),
            "pull_request": IssuePullRequest.from_dict(obj["pull_request"]) if obj.get("pull_request") is not None else None,
            "closed_at": obj.get("closed_at"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "draft": obj.get("draft"),
            "closed_by": NullableSimpleUser.from_dict(obj["closed_by"]) if obj.get("closed_by") is not None else None,
            "body_html": obj.get("body_html"),
            "body_text": obj.get("body_text"),
            "timeline_url": obj.get("timeline_url"),
            "repository": Repository.from_dict(obj["repository"]) if obj.get("repository") is not None else None,
            "performed_via_github_app": NullableIntegration.from_dict(obj["performed_via_github_app"]) if obj.get("performed_via_github_app") is not None else None,
            "author_association": obj.get("author_association"),
            "reactions": ReactionRollup.from_dict(obj["reactions"]) if obj.get("reactions") is not None else None,
            "sub_issues_summary": SubIssuesSummary.from_dict(obj["sub_issues_summary"]) if obj.get("sub_issues_summary") is not None else None
        })
        return _obj



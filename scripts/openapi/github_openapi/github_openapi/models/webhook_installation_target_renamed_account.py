# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WebhookInstallationTargetRenamedAccount(BaseModel):
    """
    WebhookInstallationTargetRenamedAccount
    """ # noqa: E501
    archived_at: Optional[StrictStr] = None
    avatar_url: StrictStr
    created_at: Optional[StrictStr] = None
    description: Optional[Any] = None
    events_url: Optional[StrictStr] = None
    followers: Optional[StrictInt] = None
    followers_url: Optional[StrictStr] = None
    following: Optional[StrictInt] = None
    following_url: Optional[StrictStr] = None
    gists_url: Optional[StrictStr] = None
    gravatar_id: Optional[StrictStr] = None
    has_organization_projects: Optional[StrictBool] = None
    has_repository_projects: Optional[StrictBool] = None
    hooks_url: Optional[StrictStr] = None
    html_url: StrictStr
    id: StrictInt
    is_verified: Optional[StrictBool] = None
    issues_url: Optional[StrictStr] = None
    login: Optional[StrictStr] = None
    members_url: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    node_id: StrictStr
    organizations_url: Optional[StrictStr] = None
    public_gists: Optional[StrictInt] = None
    public_members_url: Optional[StrictStr] = None
    public_repos: Optional[StrictInt] = None
    received_events_url: Optional[StrictStr] = None
    repos_url: Optional[StrictStr] = None
    site_admin: Optional[StrictBool] = None
    slug: Optional[StrictStr] = None
    starred_url: Optional[StrictStr] = None
    subscriptions_url: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    website_url: Optional[Any] = None
    user_view_type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["archived_at", "avatar_url", "created_at", "description", "events_url", "followers", "followers_url", "following", "following_url", "gists_url", "gravatar_id", "has_organization_projects", "has_repository_projects", "hooks_url", "html_url", "id", "is_verified", "issues_url", "login", "members_url", "name", "node_id", "organizations_url", "public_gists", "public_members_url", "public_repos", "received_events_url", "repos_url", "site_admin", "slug", "starred_url", "subscriptions_url", "type", "updated_at", "url", "website_url", "user_view_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhookInstallationTargetRenamedAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if archived_at (nullable) is None
        # and model_fields_set contains the field
        if self.archived_at is None and "archived_at" in self.model_fields_set:
            _dict['archived_at'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if website_url (nullable) is None
        # and model_fields_set contains the field
        if self.website_url is None and "website_url" in self.model_fields_set:
            _dict['website_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhookInstallationTargetRenamedAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archived_at": obj.get("archived_at"),
            "avatar_url": obj.get("avatar_url"),
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "events_url": obj.get("events_url"),
            "followers": obj.get("followers"),
            "followers_url": obj.get("followers_url"),
            "following": obj.get("following"),
            "following_url": obj.get("following_url"),
            "gists_url": obj.get("gists_url"),
            "gravatar_id": obj.get("gravatar_id"),
            "has_organization_projects": obj.get("has_organization_projects"),
            "has_repository_projects": obj.get("has_repository_projects"),
            "hooks_url": obj.get("hooks_url"),
            "html_url": obj.get("html_url"),
            "id": obj.get("id"),
            "is_verified": obj.get("is_verified"),
            "issues_url": obj.get("issues_url"),
            "login": obj.get("login"),
            "members_url": obj.get("members_url"),
            "name": obj.get("name"),
            "node_id": obj.get("node_id"),
            "organizations_url": obj.get("organizations_url"),
            "public_gists": obj.get("public_gists"),
            "public_members_url": obj.get("public_members_url"),
            "public_repos": obj.get("public_repos"),
            "received_events_url": obj.get("received_events_url"),
            "repos_url": obj.get("repos_url"),
            "site_admin": obj.get("site_admin"),
            "slug": obj.get("slug"),
            "starred_url": obj.get("starred_url"),
            "subscriptions_url": obj.get("subscriptions_url"),
            "type": obj.get("type"),
            "updated_at": obj.get("updated_at"),
            "url": obj.get("url"),
            "website_url": obj.get("website_url"),
            "user_view_type": obj.get("user_view_type")
        })
        return _obj



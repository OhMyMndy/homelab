# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from github_openapi.models.deployment1_payload import Deployment1Payload
from typing import Optional, Set
from typing_extensions import Self

class WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata(BaseModel):
    """
    WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata
    """ # noqa: E501
    name: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    npm_user: Optional[StrictStr] = None
    author: Optional[Deployment1Payload] = None
    bugs: Optional[Deployment1Payload] = None
    dependencies: Optional[Dict[str, Any]] = None
    dev_dependencies: Optional[Dict[str, Any]] = None
    peer_dependencies: Optional[Dict[str, Any]] = None
    optional_dependencies: Optional[Dict[str, Any]] = None
    description: Optional[StrictStr] = None
    dist: Optional[Deployment1Payload] = None
    git_head: Optional[StrictStr] = None
    homepage: Optional[StrictStr] = None
    license: Optional[StrictStr] = None
    main: Optional[StrictStr] = None
    repository: Optional[Deployment1Payload] = None
    scripts: Optional[Dict[str, Any]] = None
    id: Optional[StrictStr] = None
    node_version: Optional[StrictStr] = None
    npm_version: Optional[StrictStr] = None
    has_shrinkwrap: Optional[StrictBool] = None
    maintainers: Optional[List[StrictStr]] = None
    contributors: Optional[List[StrictStr]] = None
    engines: Optional[Dict[str, Any]] = None
    keywords: Optional[List[StrictStr]] = None
    files: Optional[List[StrictStr]] = None
    bin: Optional[Dict[str, Any]] = None
    man: Optional[Dict[str, Any]] = None
    directories: Optional[Deployment1Payload] = None
    os: Optional[List[StrictStr]] = None
    cpu: Optional[List[StrictStr]] = None
    readme: Optional[StrictStr] = None
    installation_command: Optional[StrictStr] = None
    release_id: Optional[StrictInt] = None
    commit_oid: Optional[StrictStr] = None
    published_via_actions: Optional[StrictBool] = None
    deleted_by_id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["name", "version", "npm_user", "author", "bugs", "dependencies", "dev_dependencies", "peer_dependencies", "optional_dependencies", "description", "dist", "git_head", "homepage", "license", "main", "repository", "scripts", "id", "node_version", "npm_version", "has_shrinkwrap", "maintainers", "contributors", "engines", "keywords", "files", "bin", "man", "directories", "os", "cpu", "readme", "installation_command", "release_id", "commit_oid", "published_via_actions", "deleted_by_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bugs
        if self.bugs:
            _dict['bugs'] = self.bugs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dist
        if self.dist:
            _dict['dist'] = self.dist.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repository
        if self.repository:
            _dict['repository'] = self.repository.to_dict()
        # override the default output from pydantic by calling `to_dict()` of directories
        if self.directories:
            _dict['directories'] = self.directories.to_dict()
        # set to None if author (nullable) is None
        # and model_fields_set contains the field
        if self.author is None and "author" in self.model_fields_set:
            _dict['author'] = None

        # set to None if bugs (nullable) is None
        # and model_fields_set contains the field
        if self.bugs is None and "bugs" in self.model_fields_set:
            _dict['bugs'] = None

        # set to None if dist (nullable) is None
        # and model_fields_set contains the field
        if self.dist is None and "dist" in self.model_fields_set:
            _dict['dist'] = None

        # set to None if repository (nullable) is None
        # and model_fields_set contains the field
        if self.repository is None and "repository" in self.model_fields_set:
            _dict['repository'] = None

        # set to None if directories (nullable) is None
        # and model_fields_set contains the field
        if self.directories is None and "directories" in self.model_fields_set:
            _dict['directories'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "version": obj.get("version"),
            "npm_user": obj.get("npm_user"),
            "author": Deployment1Payload.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "bugs": Deployment1Payload.from_dict(obj["bugs"]) if obj.get("bugs") is not None else None,
            "dependencies": obj.get("dependencies"),
            "dev_dependencies": obj.get("dev_dependencies"),
            "peer_dependencies": obj.get("peer_dependencies"),
            "optional_dependencies": obj.get("optional_dependencies"),
            "description": obj.get("description"),
            "dist": Deployment1Payload.from_dict(obj["dist"]) if obj.get("dist") is not None else None,
            "git_head": obj.get("git_head"),
            "homepage": obj.get("homepage"),
            "license": obj.get("license"),
            "main": obj.get("main"),
            "repository": Deployment1Payload.from_dict(obj["repository"]) if obj.get("repository") is not None else None,
            "scripts": obj.get("scripts"),
            "id": obj.get("id"),
            "node_version": obj.get("node_version"),
            "npm_version": obj.get("npm_version"),
            "has_shrinkwrap": obj.get("has_shrinkwrap"),
            "maintainers": obj.get("maintainers"),
            "contributors": obj.get("contributors"),
            "engines": obj.get("engines"),
            "keywords": obj.get("keywords"),
            "files": obj.get("files"),
            "bin": obj.get("bin"),
            "man": obj.get("man"),
            "directories": Deployment1Payload.from_dict(obj["directories"]) if obj.get("directories") is not None else None,
            "os": obj.get("os"),
            "cpu": obj.get("cpu"),
            "readme": obj.get("readme"),
            "installation_command": obj.get("installation_command"),
            "release_id": obj.get("release_id"),
            "commit_oid": obj.get("commit_oid"),
            "published_via_actions": obj.get("published_via_actions"),
            "deleted_by_id": obj.get("deleted_by_id")
        })
        return _obj



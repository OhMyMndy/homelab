# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from github_openapi.models.sigstore_bundle0_verification_material_tlog_entries_inner import SigstoreBundle0VerificationMaterialTlogEntriesInner
from github_openapi.models.sigstore_bundle0_verification_material_x509_certificate_chain import SigstoreBundle0VerificationMaterialX509CertificateChain
from typing import Optional, Set
from typing_extensions import Self

class SigstoreBundle0VerificationMaterial(BaseModel):
    """
    SigstoreBundle0VerificationMaterial
    """ # noqa: E501
    x509_certificate_chain: Optional[SigstoreBundle0VerificationMaterialX509CertificateChain] = Field(default=None, alias="x509CertificateChain")
    tlog_entries: Optional[List[SigstoreBundle0VerificationMaterialTlogEntriesInner]] = Field(default=None, alias="tlogEntries")
    timestamp_verification_data: Optional[StrictStr] = Field(default=None, alias="timestampVerificationData")
    __properties: ClassVar[List[str]] = ["x509CertificateChain", "tlogEntries", "timestampVerificationData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SigstoreBundle0VerificationMaterial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of x509_certificate_chain
        if self.x509_certificate_chain:
            _dict['x509CertificateChain'] = self.x509_certificate_chain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tlog_entries (list)
        _items = []
        if self.tlog_entries:
            for _item_tlog_entries in self.tlog_entries:
                if _item_tlog_entries:
                    _items.append(_item_tlog_entries.to_dict())
            _dict['tlogEntries'] = _items
        # set to None if timestamp_verification_data (nullable) is None
        # and model_fields_set contains the field
        if self.timestamp_verification_data is None and "timestamp_verification_data" in self.model_fields_set:
            _dict['timestampVerificationData'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SigstoreBundle0VerificationMaterial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "x509CertificateChain": SigstoreBundle0VerificationMaterialX509CertificateChain.from_dict(obj["x509CertificateChain"]) if obj.get("x509CertificateChain") is not None else None,
            "tlogEntries": [SigstoreBundle0VerificationMaterialTlogEntriesInner.from_dict(_item) for _item in obj["tlogEntries"]] if obj.get("tlogEntries") is not None else None,
            "timestampVerificationData": obj.get("timestampVerificationData")
        })
        return _obj



# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from github_openapi.models.git_create_blob422_response import GitCreateBlob422Response

class TestGitCreateBlob422Response(unittest.TestCase):
    """GitCreateBlob422Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GitCreateBlob422Response:
        """Test GitCreateBlob422Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GitCreateBlob422Response`
        """
        model = GitCreateBlob422Response()
        if include_optional:
            return GitCreateBlob422Response(
                message = '',
                documentation_url = '',
                errors = [
                    github_openapi.models.validation_error_errors_inner.validation_error_errors_inner(
                        resource = '', 
                        field = '', 
                        message = '', 
                        code = '', 
                        index = 56, 
                        value = null, )
                    ],
                status = '',
                metadata = github_openapi.models.repository_rule_violation_error_metadata.repository_rule_violation_error_metadata(
                    secret_scanning = github_openapi.models.repository_rule_violation_error_metadata_secret_scanning.repository_rule_violation_error_metadata_secret_scanning(
                        bypass_placeholders = [
                            github_openapi.models.repository_rule_violation_error_metadata_secret_scanning_bypass_placeholders_inner.repository_rule_violation_error_metadata_secret_scanning_bypass_placeholders_inner(
                                placeholder_id = '', 
                                token_type = '', )
                            ], ), )
            )
        else:
            return GitCreateBlob422Response(
                message = '',
                documentation_url = '',
        )
        """

    def testGitCreateBlob422Response(self):
        """Test GitCreateBlob422Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

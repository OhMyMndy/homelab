# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from github_openapi.models.dependabot_alert_security_advisory import DependabotAlertSecurityAdvisory

class TestDependabotAlertSecurityAdvisory(unittest.TestCase):
    """DependabotAlertSecurityAdvisory unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DependabotAlertSecurityAdvisory:
        """Test DependabotAlertSecurityAdvisory
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DependabotAlertSecurityAdvisory`
        """
        model = DependabotAlertSecurityAdvisory()
        if include_optional:
            return DependabotAlertSecurityAdvisory(
                ghsa_id = '',
                cve_id = '',
                summary = '',
                description = '',
                vulnerabilities = [
                    github_openapi.models.dependabot_alert_security_vulnerability.dependabot-alert-security-vulnerability(
                        package = github_openapi.models.dependabot_alert_package.dependabot-alert-package(
                            ecosystem = '', 
                            name = '', ), 
                        severity = 'low', 
                        vulnerable_version_range = '', 
                        first_patched_version = github_openapi.models.dependabot_alert_security_vulnerability_first_patched_version.dependabot_alert_security_vulnerability_first_patched_version(
                            identifier = '', ), )
                    ],
                severity = 'low',
                cvss = github_openapi.models.dependabot_alert_security_advisory_cvss.dependabot_alert_security_advisory_cvss(
                    score = 0, 
                    vector_string = '', ),
                cvss_severities = github_openapi.models.cvss_severities.cvss-severities(
                    cvss_v3 = github_openapi.models.cvss_severities_cvss_v3.cvss_severities_cvss_v3(
                        vector_string = '', 
                        score = 0, ), 
                    cvss_v4 = github_openapi.models.cvss_severities_cvss_v4.cvss_severities_cvss_v4(
                        vector_string = '', 
                        score = 0, ), ),
                cwes = [
                    github_openapi.models.dependabot_alert_security_advisory_cwes_inner.dependabot_alert_security_advisory_cwes_inner(
                        cwe_id = '', 
                        name = '', )
                    ],
                identifiers = [
                    github_openapi.models.dependabot_alert_security_advisory_identifiers_inner.dependabot_alert_security_advisory_identifiers_inner(
                        type = 'CVE', 
                        value = '', )
                    ],
                references = [
                    github_openapi.models.dependabot_alert_security_advisory_references_inner.dependabot_alert_security_advisory_references_inner(
                        url = '', )
                    ],
                published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                withdrawn_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return DependabotAlertSecurityAdvisory(
                ghsa_id = '',
                cve_id = '',
                summary = '',
                description = '',
                vulnerabilities = [
                    github_openapi.models.dependabot_alert_security_vulnerability.dependabot-alert-security-vulnerability(
                        package = github_openapi.models.dependabot_alert_package.dependabot-alert-package(
                            ecosystem = '', 
                            name = '', ), 
                        severity = 'low', 
                        vulnerable_version_range = '', 
                        first_patched_version = github_openapi.models.dependabot_alert_security_vulnerability_first_patched_version.dependabot_alert_security_vulnerability_first_patched_version(
                            identifier = '', ), )
                    ],
                severity = 'low',
                cvss = github_openapi.models.dependabot_alert_security_advisory_cvss.dependabot_alert_security_advisory_cvss(
                    score = 0, 
                    vector_string = '', ),
                cwes = [
                    github_openapi.models.dependabot_alert_security_advisory_cwes_inner.dependabot_alert_security_advisory_cwes_inner(
                        cwe_id = '', 
                        name = '', )
                    ],
                identifiers = [
                    github_openapi.models.dependabot_alert_security_advisory_identifiers_inner.dependabot_alert_security_advisory_identifiers_inner(
                        type = 'CVE', 
                        value = '', )
                    ],
                references = [
                    github_openapi.models.dependabot_alert_security_advisory_references_inner.dependabot_alert_security_advisory_references_inner(
                        url = '', )
                    ],
                published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                withdrawn_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testDependabotAlertSecurityAdvisory(self):
        """Test DependabotAlertSecurityAdvisory"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

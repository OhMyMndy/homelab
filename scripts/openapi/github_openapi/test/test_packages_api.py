# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from github_openapi.api.packages_api import PackagesApi


class TestPackagesApi(unittest.TestCase):
    """PackagesApi unit test stubs"""

    def setUp(self) -> None:
        self.api = PackagesApi()

    def tearDown(self) -> None:
        pass

    def test_packages_delete_package_for_authenticated_user(self) -> None:
        """Test case for packages_delete_package_for_authenticated_user

        Delete a package for the authenticated user
        """
        pass

    def test_packages_delete_package_for_org(self) -> None:
        """Test case for packages_delete_package_for_org

        Delete a package for an organization
        """
        pass

    def test_packages_delete_package_for_user(self) -> None:
        """Test case for packages_delete_package_for_user

        Delete a package for a user
        """
        pass

    def test_packages_delete_package_version_for_authenticated_user(self) -> None:
        """Test case for packages_delete_package_version_for_authenticated_user

        Delete a package version for the authenticated user
        """
        pass

    def test_packages_delete_package_version_for_org(self) -> None:
        """Test case for packages_delete_package_version_for_org

        Delete package version for an organization
        """
        pass

    def test_packages_delete_package_version_for_user(self) -> None:
        """Test case for packages_delete_package_version_for_user

        Delete package version for a user
        """
        pass

    def test_packages_get_all_package_versions_for_package_owned_by_authenticated_user(self) -> None:
        """Test case for packages_get_all_package_versions_for_package_owned_by_authenticated_user

        List package versions for a package owned by the authenticated user
        """
        pass

    def test_packages_get_all_package_versions_for_package_owned_by_org(self) -> None:
        """Test case for packages_get_all_package_versions_for_package_owned_by_org

        List package versions for a package owned by an organization
        """
        pass

    def test_packages_get_all_package_versions_for_package_owned_by_user(self) -> None:
        """Test case for packages_get_all_package_versions_for_package_owned_by_user

        List package versions for a package owned by a user
        """
        pass

    def test_packages_get_package_for_authenticated_user(self) -> None:
        """Test case for packages_get_package_for_authenticated_user

        Get a package for the authenticated user
        """
        pass

    def test_packages_get_package_for_organization(self) -> None:
        """Test case for packages_get_package_for_organization

        Get a package for an organization
        """
        pass

    def test_packages_get_package_for_user(self) -> None:
        """Test case for packages_get_package_for_user

        Get a package for a user
        """
        pass

    def test_packages_get_package_version_for_authenticated_user(self) -> None:
        """Test case for packages_get_package_version_for_authenticated_user

        Get a package version for the authenticated user
        """
        pass

    def test_packages_get_package_version_for_organization(self) -> None:
        """Test case for packages_get_package_version_for_organization

        Get a package version for an organization
        """
        pass

    def test_packages_get_package_version_for_user(self) -> None:
        """Test case for packages_get_package_version_for_user

        Get a package version for a user
        """
        pass

    def test_packages_list_docker_migration_conflicting_packages_for_authenticated_user(self) -> None:
        """Test case for packages_list_docker_migration_conflicting_packages_for_authenticated_user

        Get list of conflicting packages during Docker migration for authenticated-user
        """
        pass

    def test_packages_list_docker_migration_conflicting_packages_for_organization(self) -> None:
        """Test case for packages_list_docker_migration_conflicting_packages_for_organization

        Get list of conflicting packages during Docker migration for organization
        """
        pass

    def test_packages_list_docker_migration_conflicting_packages_for_user(self) -> None:
        """Test case for packages_list_docker_migration_conflicting_packages_for_user

        Get list of conflicting packages during Docker migration for user
        """
        pass

    def test_packages_list_packages_for_authenticated_user(self) -> None:
        """Test case for packages_list_packages_for_authenticated_user

        List packages for the authenticated user's namespace
        """
        pass

    def test_packages_list_packages_for_organization(self) -> None:
        """Test case for packages_list_packages_for_organization

        List packages for an organization
        """
        pass

    def test_packages_list_packages_for_user(self) -> None:
        """Test case for packages_list_packages_for_user

        List packages for a user
        """
        pass

    def test_packages_restore_package_for_authenticated_user(self) -> None:
        """Test case for packages_restore_package_for_authenticated_user

        Restore a package for the authenticated user
        """
        pass

    def test_packages_restore_package_for_org(self) -> None:
        """Test case for packages_restore_package_for_org

        Restore a package for an organization
        """
        pass

    def test_packages_restore_package_for_user(self) -> None:
        """Test case for packages_restore_package_for_user

        Restore a package for a user
        """
        pass

    def test_packages_restore_package_version_for_authenticated_user(self) -> None:
        """Test case for packages_restore_package_version_for_authenticated_user

        Restore a package version for the authenticated user
        """
        pass

    def test_packages_restore_package_version_for_org(self) -> None:
        """Test case for packages_restore_package_version_for_org

        Restore package version for an organization
        """
        pass

    def test_packages_restore_package_version_for_user(self) -> None:
        """Test case for packages_restore_package_version_for_user

        Restore package version for a user
        """
        pass


if __name__ == '__main__':
    unittest.main()

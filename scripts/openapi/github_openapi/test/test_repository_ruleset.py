# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from github_openapi.models.repository_ruleset import RepositoryRuleset

class TestRepositoryRuleset(unittest.TestCase):
    """RepositoryRuleset unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RepositoryRuleset:
        """Test RepositoryRuleset
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RepositoryRuleset`
        """
        model = RepositoryRuleset()
        if include_optional:
            return RepositoryRuleset(
                id = 56,
                name = '',
                target = 'branch',
                source_type = 'Repository',
                source = '',
                enforcement = 'disabled',
                bypass_actors = [
                    github_openapi.models.repository_ruleset_bypass_actor.Repository Ruleset Bypass Actor(
                        actor_id = 56, 
                        actor_type = 'Integration', 
                        bypass_mode = 'always', )
                    ],
                current_user_can_bypass = 'always',
                node_id = '',
                links = github_openapi.models.repository_ruleset__links.repository_ruleset__links(
                    self = github_openapi.models.repository_ruleset__links_self.repository_ruleset__links_self(
                        href = '', ), 
                    html = github_openapi.models.repository_ruleset__links_html.repository_ruleset__links_html(
                        href = '', ), ),
                conditions = None,
                rules = [
                    github_openapi.models.repository_rule.Repository Rule()
                    ],
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return RepositoryRuleset(
                id = 56,
                name = '',
                source = '',
                enforcement = 'disabled',
        )
        """

    def testRepositoryRuleset(self):
        """Test RepositoryRuleset"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

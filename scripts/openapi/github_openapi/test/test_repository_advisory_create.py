# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from github_openapi.models.repository_advisory_create import RepositoryAdvisoryCreate

class TestRepositoryAdvisoryCreate(unittest.TestCase):
    """RepositoryAdvisoryCreate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RepositoryAdvisoryCreate:
        """Test RepositoryAdvisoryCreate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RepositoryAdvisoryCreate`
        """
        model = RepositoryAdvisoryCreate()
        if include_optional:
            return RepositoryAdvisoryCreate(
                summary = '',
                description = '',
                cve_id = '',
                vulnerabilities = [
                    github_openapi.models.repository_advisory_create_vulnerabilities_inner.repository_advisory_create_vulnerabilities_inner(
                        package = github_openapi.models.repository_advisory_create_vulnerabilities_inner_package.repository_advisory_create_vulnerabilities_inner_package(
                            ecosystem = 'rubygems', 
                            name = '', ), 
                        vulnerable_version_range = '', 
                        patched_versions = '', 
                        vulnerable_functions = [
                            ''
                            ], )
                    ],
                cwe_ids = [
                    ''
                    ],
                credits = [
                    github_openapi.models.repository_advisory_create_credits_inner.repository_advisory_create_credits_inner(
                        login = '', 
                        type = 'analyst', )
                    ],
                severity = 'critical',
                cvss_vector_string = '',
                start_private_fork = True
            )
        else:
            return RepositoryAdvisoryCreate(
                summary = '',
                description = '',
                vulnerabilities = [
                    github_openapi.models.repository_advisory_create_vulnerabilities_inner.repository_advisory_create_vulnerabilities_inner(
                        package = github_openapi.models.repository_advisory_create_vulnerabilities_inner_package.repository_advisory_create_vulnerabilities_inner_package(
                            ecosystem = 'rubygems', 
                            name = '', ), 
                        vulnerable_version_range = '', 
                        patched_versions = '', 
                        vulnerable_functions = [
                            ''
                            ], )
                    ],
        )
        """

    def testRepositoryAdvisoryCreate(self):
        """Test RepositoryAdvisoryCreate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

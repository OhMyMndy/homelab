# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from github_openapi.models.webhook_repository_ruleset_edited_changes_conditions import WebhookRepositoryRulesetEditedChangesConditions

class TestWebhookRepositoryRulesetEditedChangesConditions(unittest.TestCase):
    """WebhookRepositoryRulesetEditedChangesConditions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WebhookRepositoryRulesetEditedChangesConditions:
        """Test WebhookRepositoryRulesetEditedChangesConditions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WebhookRepositoryRulesetEditedChangesConditions`
        """
        model = WebhookRepositoryRulesetEditedChangesConditions()
        if include_optional:
            return WebhookRepositoryRulesetEditedChangesConditions(
                added = [
                    github_openapi.models.repository_ruleset_conditions_for_ref_names.Repository ruleset conditions for ref names(
                        ref_name = github_openapi.models.repository_ruleset_conditions_ref_name.repository_ruleset_conditions_ref_name(
                            include = [
                                ''
                                ], 
                            exclude = [
                                ''
                                ], ), )
                    ],
                deleted = [
                    github_openapi.models.repository_ruleset_conditions_for_ref_names.Repository ruleset conditions for ref names(
                        ref_name = github_openapi.models.repository_ruleset_conditions_ref_name.repository_ruleset_conditions_ref_name(
                            include = [
                                ''
                                ], 
                            exclude = [
                                ''
                                ], ), )
                    ],
                updated = [
                    github_openapi.models.webhook_repository_ruleset_edited_changes_conditions_updated_inner.webhook_repository_ruleset_edited_changes_conditions_updated_inner(
                        condition = github_openapi.models.repository_ruleset_conditions_for_ref_names.Repository ruleset conditions for ref names(
                            ref_name = github_openapi.models.repository_ruleset_conditions_ref_name.repository_ruleset_conditions_ref_name(
                                include = [
                                    ''
                                    ], 
                                exclude = [
                                    ''
                                    ], ), ), 
                        changes = github_openapi.models.webhook_repository_ruleset_edited_changes_conditions_updated_inner_changes.webhook_repository_ruleset_edited_changes_conditions_updated_inner_changes(
                            condition_type = github_openapi.models.webhook_organization_renamed_changes_login.webhook_organization_renamed_changes_login(
                                from = '', ), 
                            target = github_openapi.models.webhook_organization_renamed_changes_login.webhook_organization_renamed_changes_login(
                                from = '', ), ), )
                    ]
            )
        else:
            return WebhookRepositoryRulesetEditedChangesConditions(
        )
        """

    def testWebhookRepositoryRulesetEditedChangesConditions(self):
        """Test WebhookRepositoryRulesetEditedChangesConditions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from github_openapi.models.secret_scanning_scan_history_custom_pattern_backfill_scans_inner import SecretScanningScanHistoryCustomPatternBackfillScansInner

class TestSecretScanningScanHistoryCustomPatternBackfillScansInner(unittest.TestCase):
    """SecretScanningScanHistoryCustomPatternBackfillScansInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SecretScanningScanHistoryCustomPatternBackfillScansInner:
        """Test SecretScanningScanHistoryCustomPatternBackfillScansInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SecretScanningScanHistoryCustomPatternBackfillScansInner`
        """
        model = SecretScanningScanHistoryCustomPatternBackfillScansInner()
        if include_optional:
            return SecretScanningScanHistoryCustomPatternBackfillScansInner(
                type = '',
                status = '',
                completed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                pattern_name = '',
                pattern_scope = ''
            )
        else:
            return SecretScanningScanHistoryCustomPatternBackfillScansInner(
        )
        """

    def testSecretScanningScanHistoryCustomPatternBackfillScansInner(self):
        """Test SecretScanningScanHistoryCustomPatternBackfillScansInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

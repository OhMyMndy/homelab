# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from github_openapi.models.rate_limit_overview_resources import RateLimitOverviewResources

class TestRateLimitOverviewResources(unittest.TestCase):
    """RateLimitOverviewResources unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RateLimitOverviewResources:
        """Test RateLimitOverviewResources
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RateLimitOverviewResources`
        """
        model = RateLimitOverviewResources()
        if include_optional:
            return RateLimitOverviewResources(
                core = github_openapi.models.rate_limit.Rate Limit(
                    limit = 56, 
                    remaining = 56, 
                    reset = 56, 
                    used = 56, ),
                graphql = github_openapi.models.rate_limit.Rate Limit(
                    limit = 56, 
                    remaining = 56, 
                    reset = 56, 
                    used = 56, ),
                search = github_openapi.models.rate_limit.Rate Limit(
                    limit = 56, 
                    remaining = 56, 
                    reset = 56, 
                    used = 56, ),
                code_search = github_openapi.models.rate_limit.Rate Limit(
                    limit = 56, 
                    remaining = 56, 
                    reset = 56, 
                    used = 56, ),
                source_import = github_openapi.models.rate_limit.Rate Limit(
                    limit = 56, 
                    remaining = 56, 
                    reset = 56, 
                    used = 56, ),
                integration_manifest = github_openapi.models.rate_limit.Rate Limit(
                    limit = 56, 
                    remaining = 56, 
                    reset = 56, 
                    used = 56, ),
                code_scanning_upload = github_openapi.models.rate_limit.Rate Limit(
                    limit = 56, 
                    remaining = 56, 
                    reset = 56, 
                    used = 56, ),
                actions_runner_registration = github_openapi.models.rate_limit.Rate Limit(
                    limit = 56, 
                    remaining = 56, 
                    reset = 56, 
                    used = 56, ),
                scim = github_openapi.models.rate_limit.Rate Limit(
                    limit = 56, 
                    remaining = 56, 
                    reset = 56, 
                    used = 56, ),
                dependency_snapshots = github_openapi.models.rate_limit.Rate Limit(
                    limit = 56, 
                    remaining = 56, 
                    reset = 56, 
                    used = 56, ),
                code_scanning_autofix = github_openapi.models.rate_limit.Rate Limit(
                    limit = 56, 
                    remaining = 56, 
                    reset = 56, 
                    used = 56, )
            )
        else:
            return RateLimitOverviewResources(
                core = github_openapi.models.rate_limit.Rate Limit(
                    limit = 56, 
                    remaining = 56, 
                    reset = 56, 
                    used = 56, ),
                search = github_openapi.models.rate_limit.Rate Limit(
                    limit = 56, 
                    remaining = 56, 
                    reset = 56, 
                    used = 56, ),
        )
        """

    def testRateLimitOverviewResources(self):
        """Test RateLimitOverviewResources"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

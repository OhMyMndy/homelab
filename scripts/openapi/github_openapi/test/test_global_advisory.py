# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from github_openapi.models.global_advisory import GlobalAdvisory

class TestGlobalAdvisory(unittest.TestCase):
    """GlobalAdvisory unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GlobalAdvisory:
        """Test GlobalAdvisory
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GlobalAdvisory`
        """
        model = GlobalAdvisory()
        if include_optional:
            return GlobalAdvisory(
                ghsa_id = '',
                cve_id = '',
                url = '',
                html_url = '',
                repository_advisory_url = '',
                summary = '',
                description = '',
                type = 'reviewed',
                severity = 'critical',
                source_code_location = '',
                identifiers = [
                    github_openapi.models.global_advisory_identifiers_inner.global_advisory_identifiers_inner(
                        type = 'CVE', 
                        value = '', )
                    ],
                references = [
                    ''
                    ],
                published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                github_reviewed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                nvd_published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                withdrawn_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                vulnerabilities = [
                    github_openapi.models.vulnerability.vulnerability(
                        package = github_openapi.models.vulnerability_package.vulnerability_package(
                            ecosystem = 'rubygems', 
                            name = '', ), 
                        vulnerable_version_range = '', 
                        first_patched_version = '', 
                        vulnerable_functions = [
                            ''
                            ], )
                    ],
                cvss = github_openapi.models.global_advisory_cvss.global_advisory_cvss(
                    vector_string = '', 
                    score = 0, ),
                cvss_severities = github_openapi.models.cvss_severities.cvss-severities(
                    cvss_v3 = github_openapi.models.cvss_severities_cvss_v3.cvss_severities_cvss_v3(
                        vector_string = '', 
                        score = 0, ), 
                    cvss_v4 = github_openapi.models.cvss_severities_cvss_v4.cvss_severities_cvss_v4(
                        vector_string = '', 
                        score = 0, ), ),
                cwes = [
                    github_openapi.models.global_advisory_cwes_inner.global_advisory_cwes_inner(
                        cwe_id = '', 
                        name = '', )
                    ],
                epss = github_openapi.models.global_advisory_epss.global_advisory_epss(
                    percentage = 1.337, 
                    percentile = 1.337, ),
                credits = [
                    github_openapi.models.global_advisory_credits_inner.global_advisory_credits_inner(
                        user = github_openapi.models.simple_user.Simple User(
                            name = '', 
                            email = '', 
                            login = 'octocat', 
                            id = 1, 
                            node_id = 'MDQ6VXNlcjE=', 
                            avatar_url = 'https://github.com/images/error/octocat_happy.gif', 
                            gravatar_id = '41d064eb2195891e12d0413f63227ea7', 
                            url = 'https://api.github.com/users/octocat', 
                            html_url = 'https://github.com/octocat', 
                            followers_url = 'https://api.github.com/users/octocat/followers', 
                            following_url = 'https://api.github.com/users/octocat/following{/other_user}', 
                            gists_url = 'https://api.github.com/users/octocat/gists{/gist_id}', 
                            starred_url = 'https://api.github.com/users/octocat/starred{/owner}{/repo}', 
                            subscriptions_url = 'https://api.github.com/users/octocat/subscriptions', 
                            organizations_url = 'https://api.github.com/users/octocat/orgs', 
                            repos_url = 'https://api.github.com/users/octocat/repos', 
                            events_url = 'https://api.github.com/users/octocat/events{/privacy}', 
                            received_events_url = 'https://api.github.com/users/octocat/received_events', 
                            type = 'User', 
                            site_admin = True, 
                            starred_at = '"2020-07-09T00:17:55Z"', 
                            user_view_type = 'public', ), 
                        type = 'analyst', )
                    ]
            )
        else:
            return GlobalAdvisory(
                ghsa_id = '',
                cve_id = '',
                url = '',
                html_url = '',
                repository_advisory_url = '',
                summary = '',
                description = '',
                type = 'reviewed',
                severity = 'critical',
                source_code_location = '',
                identifiers = [
                    github_openapi.models.global_advisory_identifiers_inner.global_advisory_identifiers_inner(
                        type = 'CVE', 
                        value = '', )
                    ],
                references = [
                    ''
                    ],
                published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                github_reviewed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                nvd_published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                withdrawn_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                vulnerabilities = [
                    github_openapi.models.vulnerability.vulnerability(
                        package = github_openapi.models.vulnerability_package.vulnerability_package(
                            ecosystem = 'rubygems', 
                            name = '', ), 
                        vulnerable_version_range = '', 
                        first_patched_version = '', 
                        vulnerable_functions = [
                            ''
                            ], )
                    ],
                cvss = github_openapi.models.global_advisory_cvss.global_advisory_cvss(
                    vector_string = '', 
                    score = 0, ),
                cwes = [
                    github_openapi.models.global_advisory_cwes_inner.global_advisory_cwes_inner(
                        cwe_id = '', 
                        name = '', )
                    ],
                credits = [
                    github_openapi.models.global_advisory_credits_inner.global_advisory_credits_inner(
                        user = github_openapi.models.simple_user.Simple User(
                            name = '', 
                            email = '', 
                            login = 'octocat', 
                            id = 1, 
                            node_id = 'MDQ6VXNlcjE=', 
                            avatar_url = 'https://github.com/images/error/octocat_happy.gif', 
                            gravatar_id = '41d064eb2195891e12d0413f63227ea7', 
                            url = 'https://api.github.com/users/octocat', 
                            html_url = 'https://github.com/octocat', 
                            followers_url = 'https://api.github.com/users/octocat/followers', 
                            following_url = 'https://api.github.com/users/octocat/following{/other_user}', 
                            gists_url = 'https://api.github.com/users/octocat/gists{/gist_id}', 
                            starred_url = 'https://api.github.com/users/octocat/starred{/owner}{/repo}', 
                            subscriptions_url = 'https://api.github.com/users/octocat/subscriptions', 
                            organizations_url = 'https://api.github.com/users/octocat/orgs', 
                            repos_url = 'https://api.github.com/users/octocat/repos', 
                            events_url = 'https://api.github.com/users/octocat/events{/privacy}', 
                            received_events_url = 'https://api.github.com/users/octocat/received_events', 
                            type = 'User', 
                            site_admin = True, 
                            starred_at = '"2020-07-09T00:17:55Z"', 
                            user_view_type = 'public', ), 
                        type = 'analyst', )
                    ],
        )
        """

    def testGlobalAdvisory(self):
        """Test GlobalAdvisory"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

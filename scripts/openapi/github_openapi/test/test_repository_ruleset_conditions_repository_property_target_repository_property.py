# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from github_openapi.models.repository_ruleset_conditions_repository_property_target_repository_property import RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty

class TestRepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty(unittest.TestCase):
    """RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty:
        """Test RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty`
        """
        model = RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty()
        if include_optional:
            return RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty(
                include = [
                    github_openapi.models.repository_ruleset_property_targeting_definition.Repository ruleset property targeting definition(
                        name = '', 
                        property_values = [
                            ''
                            ], 
                        source = 'custom', )
                    ],
                exclude = [
                    github_openapi.models.repository_ruleset_property_targeting_definition.Repository ruleset property targeting definition(
                        name = '', 
                        property_values = [
                            ''
                            ], 
                        source = 'custom', )
                    ]
            )
        else:
            return RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty(
        )
        """

    def testRepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty(self):
        """Test RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

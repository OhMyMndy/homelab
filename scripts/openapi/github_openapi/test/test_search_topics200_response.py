# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from github_openapi.models.search_topics200_response import SearchTopics200Response

class TestSearchTopics200Response(unittest.TestCase):
    """SearchTopics200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchTopics200Response:
        """Test SearchTopics200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchTopics200Response`
        """
        model = SearchTopics200Response()
        if include_optional:
            return SearchTopics200Response(
                total_count = 56,
                incomplete_results = True,
                items = [
                    github_openapi.models.topic_search_result_item.Topic Search Result Item(
                        name = '', 
                        display_name = '', 
                        short_description = '', 
                        description = '', 
                        created_by = '', 
                        released = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        featured = True, 
                        curated = True, 
                        score = 1.337, 
                        repository_count = 56, 
                        logo_url = '', 
                        text_matches = [
                            github_openapi.models.search_result_text_matches_inner.search_result_text_matches_inner(
                                object_url = '', 
                                object_type = '', 
                                property = '', 
                                fragment = '', 
                                matches = [
                                    github_openapi.models.search_result_text_matches_inner_matches_inner.search_result_text_matches_inner_matches_inner(
                                        text = '', 
                                        indices = [
                                            56
                                            ], )
                                    ], )
                            ], 
                        related = [
                            github_openapi.models.topic_search_result_item_related_inner.topic_search_result_item_related_inner(
                                topic_relation = github_openapi.models.topic_search_result_item_related_inner_topic_relation.topic_search_result_item_related_inner_topic_relation(
                                    id = 56, 
                                    name = '', 
                                    topic_id = 56, 
                                    relation_type = '', ), )
                            ], 
                        aliases = [
                            github_openapi.models.topic_search_result_item_related_inner.topic_search_result_item_related_inner()
                            ], )
                    ]
            )
        else:
            return SearchTopics200Response(
                total_count = 56,
                incomplete_results = True,
                items = [
                    github_openapi.models.topic_search_result_item.Topic Search Result Item(
                        name = '', 
                        display_name = '', 
                        short_description = '', 
                        description = '', 
                        created_by = '', 
                        released = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        featured = True, 
                        curated = True, 
                        score = 1.337, 
                        repository_count = 56, 
                        logo_url = '', 
                        text_matches = [
                            github_openapi.models.search_result_text_matches_inner.search_result_text_matches_inner(
                                object_url = '', 
                                object_type = '', 
                                property = '', 
                                fragment = '', 
                                matches = [
                                    github_openapi.models.search_result_text_matches_inner_matches_inner.search_result_text_matches_inner_matches_inner(
                                        text = '', 
                                        indices = [
                                            56
                                            ], )
                                    ], )
                            ], 
                        related = [
                            github_openapi.models.topic_search_result_item_related_inner.topic_search_result_item_related_inner(
                                topic_relation = github_openapi.models.topic_search_result_item_related_inner_topic_relation.topic_search_result_item_related_inner_topic_relation(
                                    id = 56, 
                                    name = '', 
                                    topic_id = 56, 
                                    relation_type = '', ), )
                            ], 
                        aliases = [
                            github_openapi.models.topic_search_result_item_related_inner.topic_search_result_item_related_inner()
                            ], )
                    ],
        )
        """

    def testSearchTopics200Response(self):
        """Test SearchTopics200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

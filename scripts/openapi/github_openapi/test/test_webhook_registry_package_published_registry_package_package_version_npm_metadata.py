# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from github_openapi.models.webhook_registry_package_published_registry_package_package_version_npm_metadata import WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata

class TestWebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata(unittest.TestCase):
    """WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata:
        """Test WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata`
        """
        model = WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata()
        if include_optional:
            return WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata(
                name = '',
                version = '',
                npm_user = '',
                author = None,
                bugs = None,
                dependencies = github_openapi.models.dependencies.dependencies(),
                dev_dependencies = github_openapi.models.dev_dependencies.dev_dependencies(),
                peer_dependencies = github_openapi.models.peer_dependencies.peer_dependencies(),
                optional_dependencies = github_openapi.models.optional_dependencies.optional_dependencies(),
                description = '',
                dist = None,
                git_head = '',
                homepage = '',
                license = '',
                main = '',
                repository = None,
                scripts = github_openapi.models.scripts.scripts(),
                id = '',
                node_version = '',
                npm_version = '',
                has_shrinkwrap = True,
                maintainers = [
                    ''
                    ],
                contributors = [
                    ''
                    ],
                engines = github_openapi.models.engines.engines(),
                keywords = [
                    ''
                    ],
                files = [
                    ''
                    ],
                bin = github_openapi.models.bin.bin(),
                man = github_openapi.models.man.man(),
                directories = None,
                os = [
                    ''
                    ],
                cpu = [
                    ''
                    ],
                readme = '',
                installation_command = '',
                release_id = 56,
                commit_oid = '',
                published_via_actions = True,
                deleted_by_id = 56
            )
        else:
            return WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata(
        )
        """

    def testWebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata(self):
        """Test WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from github_openapi.models.webhooks_rule import WebhooksRule

class TestWebhooksRule(unittest.TestCase):
    """WebhooksRule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WebhooksRule:
        """Test WebhooksRule
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WebhooksRule`
        """
        model = WebhooksRule()
        if include_optional:
            return WebhooksRule(
                admin_enforced = True,
                allow_deletions_enforcement_level = 'off',
                allow_force_pushes_enforcement_level = 'off',
                authorized_actor_names = [
                    ''
                    ],
                authorized_actors_only = True,
                authorized_dismissal_actors_only = True,
                create_protected = True,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                dismiss_stale_reviews_on_push = True,
                id = 56,
                ignore_approvals_from_contributors = True,
                linear_history_requirement_enforcement_level = 'off',
                lock_branch_enforcement_level = 'off',
                lock_allows_fork_sync = True,
                merge_queue_enforcement_level = 'off',
                name = '',
                pull_request_reviews_enforcement_level = 'off',
                repository_id = 56,
                require_code_owner_review = True,
                require_last_push_approval = True,
                required_approving_review_count = 56,
                required_conversation_resolution_level = 'off',
                required_deployments_enforcement_level = 'off',
                required_status_checks = [
                    ''
                    ],
                required_status_checks_enforcement_level = 'off',
                signature_requirement_enforcement_level = 'off',
                strict_required_status_checks_policy = True,
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return WebhooksRule(
                admin_enforced = True,
                allow_deletions_enforcement_level = 'off',
                allow_force_pushes_enforcement_level = 'off',
                authorized_actor_names = [
                    ''
                    ],
                authorized_actors_only = True,
                authorized_dismissal_actors_only = True,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                dismiss_stale_reviews_on_push = True,
                id = 56,
                ignore_approvals_from_contributors = True,
                linear_history_requirement_enforcement_level = 'off',
                lock_branch_enforcement_level = 'off',
                merge_queue_enforcement_level = 'off',
                name = '',
                pull_request_reviews_enforcement_level = 'off',
                repository_id = 56,
                require_code_owner_review = True,
                required_approving_review_count = 56,
                required_conversation_resolution_level = 'off',
                required_deployments_enforcement_level = 'off',
                required_status_checks = [
                    ''
                    ],
                required_status_checks_enforcement_level = 'off',
                signature_requirement_enforcement_level = 'off',
                strict_required_status_checks_policy = True,
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testWebhooksRule(self):
        """Test WebhooksRule"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

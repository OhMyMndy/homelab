name: litellm
services:
  db:
    image: postgres:16
    container_name: litellm-postgresqc
    volumes:
      - ./storage/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER:?}
      POSTGRES_DB: ${POSTGRES_DB:?}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?}
    command: postgres -c wal_level=logical
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB:?} -U ${POSTGRES_USER:?}"]
      interval: 1s
      timeout: 5s
      retries: 10
  init:
    image: hairyhenderson/gomplate:stable
    container_name: litellm-init
    restart: no
    cpus: 0.5
    mem_limit: 128m
    user: ${PUID:?}:${PGID:?}
    working_dir: /config
    command: -c .=/models.yaml --input-dir /templates --output-dir /config
    volumes:
      - ./config:/config
      - ./models.yaml:/models.yaml:ro
      - ./templates:/templates

  litellm:
    image: ghcr.io/berriai/litellm:main-v1.65.1-nightly
    container_name: litellm
    cpus: 0.25
    mem_limit: 512m
    volumes:
      - ./config/litellm-config.yaml:/app/config.yaml
    depends_on:
      init:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER:?}:${POSTGRES_PASSWORD:?}@db:5432/${POSTGRES_DB:?}"
      STORE_MODEL_IN_DB: "False" # allows adding models to proxy via UI
      LITELLM_MASTER_KEY: "${LITELLM_MASTER_KEY:?}"
      LITELLM_SALT_KEY: "${LITELLM_SALT_KEY:?}"
      OPENROUTER_API_KEY: "${OPENROUTER_API_KEY:?}"
      LITELLM_LOG: "INFO"
    networks:
      - default
      - reverse-proxy
    command:
      - "--config=/app/config.yaml"
    restart: unless-stopped
    labels:
      - "traefik.docker.network=reverse-proxy"
      - "traefik.http.routers.litellm.rule=Host(`litellm.home.ohmymndy.com`)"
      - "traefik.http.routers.litellm.tls=true"
      - "traefik.enable=true"
    healthcheck:
      test:
        ["CMD-SHELL", "bash", "-c", "cat < /dev/null > /dev/tcp/127.0.0.1/4000"]
      interval: 1m
      timeout: 1s
      retries: 3
      start_period: 30s
      start_interval: 1s

  litellm-configure:
    image: ohmymndy/alpine
    container_name: litellm-configure
    restart: no
    cpus: 0.5
    mem_limit: 256m
    volumes:
      - ../:/start
    working_dir: /start
    command:
      - -c
      - |
        ./litellm/configure.sh
    user: ${PUID:?}:${PGID:?}
    depends_on:
      litellm:
        condition: service_healthy

  ollama-auth:
    image: ohmymndy/traefik-mw-bearer-auth:f191e5
    container_name: litellm-ollama-auth
    restart: unless-stopped
    cpus: 0.25
    mem_limit: 128m
    environment:
      TOKENS: 12345
    networks:
      - default
      - reverse-proxy

  ollama:
    image: ollama/ollama:latest
    container_name: litellm-ollama
    ports:
      - 7869:11434
    volumes:
      - ./storage/ollama:/root/.ollama
    depends_on:
      - ollama-auth
    tty: true
    cpus: 1
    mem_limit: 2048m
    restart: unless-stopped
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
    networks:
      - default
      - reverse-proxy
    labels:
      - "traefik.docker.network=reverse-proxy"
      - "traefik.http.routers.ollama.rule=Host(`ollama.home.ohmymndy.com`)"
      - "traefik.http.routers.ollama.tls=true"
      - "traefik.http.middlewares.ollama-auth.forwardauth.address=http://ollama-auth:8087/auth"
      - "traefik.http.routers.ollama.middlewares=ollama-auth@docker"
      - "traefik.enable=true"
  # prometheus:
  #   image: prom/prometheus:v3.1.0
  #
  #   volumes:
  #     - ./storage/prometheus:/prometheus
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   # ports:
  #   # - "9090:9090"
  #   command:
  #     - "--config.file=/etc/prometheus/prometheus.yml"
  #     - "--storage.tsdb.path=/prometheus"
  #     - "--storage.tsdb.retention.time=15d"
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "wget", "-q", "--spider", "http://127.0.0.1:9090"]
  #     interval: 1m
  #     timeout: 3s
  #     retries: 3
  #     start_period: 40s
  #     start_interval: 5s

networks:
  default:
  reverse-proxy:
    name: reverse-proxy
    external: true

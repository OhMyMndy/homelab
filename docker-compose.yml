version: "2.3"


services:
  traefik:
    image: traefik:v2.4
    restart: unless-stopped
    init: true
    env_file: ./.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # - ./etc/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      # - ./etc/traefik/traefik-dynamic.yml:/etc/traefik/traefik-dynamic.yml:ro
      # - ./etc/traefik/acme.json:/etc/traefik/acme.json
      - ./etc/traefik:/etc/traefik
      - ./storage/traefik/letsencrypt:/letsencrypt
    ports:
      - 80:80
      - 443:443
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.traefik.rule=Host(`traefik.home.local`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
      - "traefik.enable=true"
    extra_hosts: 
      - host.docker.internal:172.17.0.1
    networks:
      - default

  traefik-public:
    image: traefik:v2.4
    restart: unless-stopped
    init: true
    env_file: ./.env
    environment:
      - DUCKDNS_TOKEN=$DUCKDNSTOKEN_MANDY_HOME
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./etc/traefik-public:/etc/traefik
      - ./storage/traefik-public/letsencrypt:/letsencrypt
    ports:
      - 4430:443
    labels:
      - "traefik.http.routers.traefik-public.rule=Host(`traefik.home.external`) || Host(`traefik-public.home.local`)"
      - "traefik.http.services.traefik-public.loadbalancer.server.port=8080"
      - "traefik.enable=true"
      - "traefik.tags=traefik-public"
      - "traefik.http.routers.traefik-public.middlewares=auth@file"

    extra_hosts: 
      - host.docker.internal:172.17.0.1
    networks:
      - default
      - traefik-public
  
  files-public:
    image: httpd
    # init: true
    # working_dir: /data
    restart: unless-stopped
    # command: python -m http.server 8000

    labels:
      - "traefik.http.routers.files-public.rule=Host(`files.home.external`) || Host(`files-public.home.local`)"
      - "traefik.http.services.files-public.loadbalancer.server.port=80"
      - "traefik.enable=true"
      - "traefik.tags=traefik-both"
      - "traefik.http.routers.files-public.middlewares=auth-files@file"
      - "traefik.http.middlewares.limit.buffering.maxResponseBodyBytes=12884895291"
      - "traefik.http.middlewares.limit.buffering.memResponseBodyBytes=20000000"


    networks:
      - traefik-public
      - default
    cap_add:
      - NET_ADMIN
  

  redis:
    image: "bitnami/redis:6.0"
    restart: unless-stopped
    environment:
      - "ALLOW_EMPTY_PASSWORD=yes"

  app-daemon:
    container_name: app-daemon
    image: ohmymndy/app-daemon
    build:
      context: ./dockerfiles/app-daemon
    volumes:
      - ./storage/app-daemon:/conf
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=Europe/Amsterdam
    restart: unless-stopped
    env_file: ./.env
    network_mode: host
    expose:
      - 5050
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.app-daemon.rule=Host(`app-daemon.home.local`)"
      - "traefik.http.routers.app-daemon.tls=true"

      - "traefik.http.services.app-daemon.loadbalancer.server.port=5050"
      - "traefik.enable=true"

  home-assistant:
    container_name: home-assistant
    image: ohmymndy/home-assistant
    build:
      context: ./dockerfiles/home-assistant
    volumes:
      - ./storage/home-assistant:/config
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=Europe/Amsterdam
    restart: unless-stopped
    env_file: ./.env
    network_mode: host
    expose:
      - 8123
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.home-assistant.rule=Host(`home-assistant.home.local`)"
      - "traefik.http.routers.home-assistant.tls=true"

      - "traefik.http.services.home-assistant.loadbalancer.server.port=8123"
      - "traefik.enable=true"

  bitwarden:
    restart: unless-stopped
    image: "bitwardenrs/server"
    init: true
    environment:
      - "ADMIN_TOKEN=${BITWARDEN_ADMIN_TOKEN}"
      - "SMTP_PASSWORD=${BITWARDEN_SMTP_PASSWORD}"
      - "SMTP_USERNAME=${SMTP_USERNAME}"
    volumes:
      - "./storage/bitwarden:/data/:rw"
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.bitwarden.rule=Host(`passwords.home.local`)"
      - "traefik.http.routers.bitwarden.tls=true"

      - "traefik.enable=true"
      # - "traefik.http.routers.bitwarden.middlewares=local-only@file"



  node-red:
    restart: unless-stopped
    image: ohmymndy/node-red
    env_file: ./.env
    build:
      context: "./dockerfiles/node-red"
      dockerfile: Dockerfile
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./storage/node-red:/data
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.node-red.rule=Host(`node-red.home.local`)"
      - "traefik.http.routers.node-red.tls=true"
      - "traefik.http.services.node-red.loadbalancer.server.port=1880"
      - "traefik.enable=true"

  pihole:
    image: pihole/pihole:latest
    cpus: '1'
    mem_limit: 128m
    memswap_limit: 128m
    init: true
    dns:
      - 1.1.1.1
      - 8.8.8.8
    env_file:
      ./.env
    environment:
      - TZ=${TZ:-Europe/Brussels}
      - WEBPASSWORD=$PIHOLE_WEBPASSWORD
    ports:
      - "192.168.81.2:53:53/tcp"
      - "192.168.81.2:53:53/udp"
    volumes:  
      - ./storage/pihole/:/etc/pihole/
      - './storage/pihole-dnsmasq.d/:/etc/dnsmasq.d/'
      - /var/lib/lxcfs/proc/cpuinfo:/proc/cpuinfo:rw
      - /var/lib/lxcfs/proc/diskstats:/proc/diskstats:rw
      - /var/lib/lxcfs/proc/meminfo:/proc/meminfo:rw
      - /var/lib/lxcfs/proc/stat:/proc/stat:rw
      - /var/lib/lxcfs/proc/swaps:/proc/swaps:rw
      - /var/lib/lxcfs/proc/uptime:/proc/uptime:rw
    labels:
      - "traefik.http.routers.pihole.rule=Host(`pihole.home.local`)"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"
      - "traefik.http.routers.pihole.tls=true"
      - "traefik.enable=true"
    restart: unless-stopped
    
  kitana:
    image: pannal/kitana
    restart: unless-stopped
    volumes:
      - ./storage/kitana:/app/data
      - /etc/localtime:/etc/localtime:ro
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.kitana.rule=Host(`kitana.home.local`)"
      - "traefik.http.routers.kitana.tls=true"

      - "traefik.http.services.kitana.loadbalancer.server.port=31337"
      - "traefik.enable=true"
    command: ["-B", "0.0.0.0:31337", "-P"]

  # transmission:
  #   image: haugene/transmission-openvpn:dev
  #   privileged: true
  #   restart: unless-stopped
  #   volumes:
  #    - ./storage/transmission/:/data
  #    - /tank/downloads/completed:/data/completed:rw
  #    - /tank/downloads/incompleted:/data/incompleted:rw
  #    - /etc/localtime:/etc/localtime:ro
  #   env_file: ./.env
  #   environment:
  #     - OPENVPN_PROVIDER=PUREVPN
  #     - OPENVPN_CONFIG=Belgium-tcp
  #     - OPENVPN_USERNAME=$OPENVPN_USERNAME
  #     - OPENVPN_PASSWORD=$OPENVPN_PASSWORD
  #     - OPENVPN_OPTS=--inactive 3600 --ping 10 --ping-exit 60
  #   labels:
  #     - "traefik.http.routers.transmission.rule=Host(`transmission.home.local`)"
  #     - "traefik.http.routers.transmission.tls=true"

  #     - "traefik.http.services.transmission.loadbalancer.server.port=9091"
  #     - "traefik.enable=true"

  sabnzb:
    image: "linuxserver/sabnzbd"
    restart: unless-stopped
    environment:
      - TZ=$TZ
      - PGID=${PUID:-1000}
      - PUID=${PGUID:-1000}
    volumes:
      - "./storage/sabnzb:/config"
      - /tank:/tank
      - /etc/localtime:/etc/localtime:ro
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.sabnzb.rule=Host(`sabnzb.home.local`)"
      - "traefik.http.routers.sabnzb.tls=true"

      - "traefik.http.services.sabnzb.loadbalancer.server.port=8080"
      - "traefik.enable=true"

  openvpn:
    cap_add:
     - NET_ADMIN
    image: kylemanna/openvpn
    container_name: openvpn
    ports:
     - "1194:1194/udp"
    restart: always
    volumes:
      - ./storage/openvpn:/etc/openvpn
      - /etc/localtime:/etc/localtime:ro

  mysql:
    image: "mariadb:10.4"
    container_name: mysql
    hostname: mysql
    init: true
    env_file: ./.env
    restart: unless-stopped
    ports:
      - 127.0.0.1:3306:3306
    volumes:
      - "/tank/database/mysql/:/var/lib/mysql"
      - ./etc/mariadb/my.cnf:/etc/mysql/my.cnf
      - /etc/localtime:/etc/localtime:ro

  crontab-ui:
    image: ohmymndy/crontab-ui
    build: ./dockerfiles/crontab-ui
    restart: unless-stopped
    volumes:
      - "./storage/crontab-ui:/crontab-ui/crontabs"
      - "/tank:/tank"
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=$TZ
      - BASIC_AUTH_USER=mandy
      - BASIC_AUTH_PWD=$CRONTAB_UI_PASSWORD
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.crontab-ui.rule=Host(`crontab-ui.home.local`)"
      - "traefik.http.routers.crontab-ui.tls=true"
      - "traefik.enable=true"

  spotweb:
    build:
      context: "./dockerfiles/spotweb"
      dockerfile: Dockerfile
    container_name: spotweb
    volumes:
      - "./storage/spotweb:/config"
      - "./dockerfiles/spotweb/entrypoint.sh:/entrypoint.sh"
      - "./dockerfiles/spotweb/files/hosts.conf:/etc/apache2/sites-enabled/000-default.conf"
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    environment:
      - TZ=$TZ
      - SPOTWEB_DB_TYPE=pdo_mysql
      - SPOTWEB_DB_HOST=mysql
      - SPOTWEB_DB_NAME=spotweb
      - SPOTWEB_DB_USER=root
      - SPOTWEB_DB_PASS=$MYSQL_ROOT_PASSWORD
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.spotweb.rule=Host(`spotweb.home.local`)"
      - "traefik.http.routers.spotweb.tls=true"
      - "traefik.enable=true"

  documentserver:
    image: ohmymndy/documentserver:0.1
    build:
      context: "./dockerfiles/documentserver"
      dockerfile: Dockerfile

    restart: unless-stopped  
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.documentserver.rule=Host(`documentserver.home.local`)"
      - "traefik.http.routers.documentserver.tls=true"
      - "traefik.enable=true"

  nextcloud:
    image: linuxserver/nextcloud:19.0.1-ls92
    hostname: nextcloud
    container_name: nextcloud
    volumes:
      - "/tank/media/nextcloud/config:/config"
      - "/tank/media/nextcloud/data:/data"
    env_file: ./.env
    restart: unless-stopped
    healthcheck:
      interval: 10s
      retries: 2
      test: curl --silent --fail --get --max-time 3 --connect-timeout 2 --insecure https://localhost || exit 1
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.home.local`)"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=443"
      - "traefik.http.services.nextcloud.loadbalancer.server.scheme=https"
      - "traefik.enable=true"
      - "traefik.http.middlewares.nextcloud.headers.contentSecurityPolicy=self"

  heimdall:
    image: linuxserver/heimdall
    volumes:
      - "./storage/heimdall:/config"
    environment:
      - PUID=${UID:-1000}
      - PGID=${GID:-1000}
    restart: unless-stopped
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.heimdall.rule=Host(`heimdall.home.ohmymndy.com`)"
      - "traefik.http.services.heimdall.loadbalancer.server.port=443"
      - "traefik.http.services.heimdall.loadbalancer.server.scheme=https"
      - "traefik.enable=true"
      - "traefik.http.middlewares.heimdall.headers.contentSecurityPolicy=self"

  homer:
    image: b4bz/homer
    container_name: homer
    volumes:
      - ./storage/homer/:/www/assets
    ports:
      - 8080:8080
    environment:
      - UID=${PUID:-1000}
      - GID=${PGID:-1000}
    restart: unless-stopped
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.homer.rule=Host(`homer.home.ohmymndy.com`)"
      - "traefik.http.services.homer.loadbalancer.server.port=8080"
      - "traefik.enable=true"
      - "traefik.http.middlewares.homer.headers.contentSecurityPolicy=self"

  tt-rss:
    build:
      context: ./dockerfiles/tt-rss/
    image: ohmymndy/tt-rss:0.1.1
    container_name: tt-rss
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/Brussels}
    volumes:
      - ./storage/tt-rss:/config
    restart: unless-stopped
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.tt-rss.rule=Host(`tt-rss.home.local`)"
      - "traefik.http.routers.tt-rss.tls=true"
      - "traefik.enable=true"
  

  code:
    build:
      context: ./dockerfiles/code/
      target: code
    image: ohmymndy/code
    privileged: true
    cpus: '2'
    mem_limit: 4000m
    init: true
    container_name: code
    env_file: ./.env
    healthcheck:
      interval: 10s
      retries: 2
      test: curl --silent --fail --get --max-time 3 --insecure --connect-timeout 2 http://localhost:8443/ || exit 1
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/Brussels}
      - PROXY_DOMAIN=code.home.local
      - PASSWORD=$CODE_PASSWORD
      - SUDO_PASSWORD=$CODE_PASSWORD
    volumes:
      - ./storage/code:$HOME
      - ./storage/code-docker:/var/lib/docker
      - $HOME/docker:$HOME/docker
      - $HOME/dotfiles:$HOME/dotfiles
      - $HOME/.zshrc:$HOME/.zshrc
      - $HOME/.oh-my-zsh:$HOME/.oh-my-zsh
      - $HOME/.ssh:$HOME/.ssh
      - $HOME/src:$HOME/src
      - $HOME/Documents:$HOME/Documents
      - /var/run/docker.sock:/var/run/docker-host.sock
      - /etc/localtime:/etc/localtime:ro
      - /var/lib/lxcfs/proc/cpuinfo:/proc/cpuinfo:rw
      - /var/lib/lxcfs/proc/diskstats:/proc/diskstats:rw
      - /var/lib/lxcfs/proc/meminfo:/proc/meminfo:rw
      - /var/lib/lxcfs/proc/stat:/proc/stat:rw
      - /var/lib/lxcfs/proc/swaps:/proc/swaps:rw
      - /var/lib/lxcfs/proc/uptime:/proc/uptime:rw
    restart: unless-stopped
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.code.rule=Host(`code.home.local`) || Host(`code.home.external`)"
      - "traefik.http.routers.code.tls=true"
      - "traefik.http.services.code.loadbalancer.server.port=8443"
      - "traefik.enable=true"
      - "traefik.http.middlewares.code.headers.customrequestheaders.Service-Worker-Allowed=/"
      - "traefik.http.middlewares.code.headers.customresponseheaders.Service-Worker-Allowed=/"
      - "traefik.http.middlewares.replaceslash.replacepathregex.regex=/+"
      - "traefik.http.middlewares.replaceslash.replacepathregex.replacement=/"
      - "traefik.http.routers.code.middlewares=replaceslash,code"
      - "traefik.tags=traefik-both"
      - "traefik.http.routers.code.middlewares=auth@file"
    networks:
      - default
      - traefik-public


  kubernetes:
    build:
      context: ./dockerfiles/code/
      target: kubernetes
    image: ohmymndy/kubernetes
    cpus: '3'
    mem_limit: 4000m
    privileged: true
    init: true
    container_name: kubernetes
    env_file: ./.env
    environment:
      - PUID=${UID:-1000}
      - PGID=${GID:-1000}
      - TZ=${TZ:-Europe/Brussels}
      - PROXY_DOMAIN=kubernetes.home.local
      - PASSWORD=$CODE_PASSWORD
      - SUDO_PASSWORD=$CODE_PASSWORD
    volumes:
      - ./storage/kubernetes:$HOME
      - ./storage/kubernetes-docker:/var/lib/docker
      - $HOME/docker:$HOME/docker
      - $HOME/dotfiles:$HOME/dotfiles
      - $HOME/.zshrc:$HOME/.zshrc
      - $HOME/.oh-my-zsh:$HOME/.oh-my-zsh
      - $HOME/.ssh:$HOME/.ssh
      - $HOME/src:$HOME/src
      - $HOME/Documents:$HOME/Documents
      - /var/run/docker.sock:/var/run/docker-host.sock
      - /etc/localtime:/etc/localtime:ro
      - /var/lib/lxcfs/proc/cpuinfo:/proc/cpuinfo:rw
      - /var/lib/lxcfs/proc/diskstats:/proc/diskstats:rw
      - /var/lib/lxcfs/proc/meminfo:/proc/meminfo:rw
      - /var/lib/lxcfs/proc/stat:/proc/stat:rw
      - /var/lib/lxcfs/proc/swaps:/proc/swaps:rw
      - /var/lib/lxcfs/proc/uptime:/proc/uptime:rw
    restart: unless-stopped
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.kubernetes.rule=Host(`kubernetes.home.local`) || Host(`kubernetes.home.external`)"
      - "traefik.http.routers.kubernetes.tls=true"
      - "traefik.http.services.kubernetes.loadbalancer.server.port=8443"
      - "traefik.enable=true"
      - "traefik.http.middlewares.kubernetes.headers.customrequestheaders.Service-Worker-Allowed=/"
      - "traefik.http.middlewares.kubernetes.headers.customresponseheaders.Service-Worker-Allowed=/"
      - "traefik.http.middlewares.replaceslash.replacepathregex.regex=/+"
      - "traefik.http.middlewares.replaceslash.replacepathregex.replacement=/"
      - "traefik.http.routers.kubernetes.middlewares=replaceslash,code"
      - "traefik.tags=traefik-both"
      - "traefik.http.routers.kubernetes.middlewares=auth@file"
    networks:
      - default
      - traefik-public

  ubooquity:
    image: ghcr.io/linuxserver/ubooquity
    container_name: ubooquity
    cpus: '2'
    mem_limit: 520m
    init: true
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/Brussels}
      - MAXMEM=520
    volumes:
      - ./storage/ubooquity:/config
      - /tank/media/nextcloud/data/mandy/files/Ebooks:/books
      # - <path to comics>:/comics
      # - <path to raw files>:/files
      - /var/run/docker.sock:/var/run/docker-host.sock
      - /etc/localtime:/etc/localtime:ro
      - /var/lib/lxcfs/proc/cpuinfo:/proc/cpuinfo:rw
      - /var/lib/lxcfs/proc/diskstats:/proc/diskstats:rw
      - /var/lib/lxcfs/proc/meminfo:/proc/meminfo:rw
      - /var/lib/lxcfs/proc/stat:/proc/stat:rw
      - /var/lib/lxcfs/proc/swaps:/proc/swaps:rw
      - /var/lib/lxcfs/proc/uptime:/proc/uptime:rw
    restart: unless-stopped
    labels:
      - "traefik.docker.network=default"
      - "traefik.tags=traefik-both"
      - "traefik.enable=true"
      - "traefik.http.routers.ubooquity.rule=Host(`ubooquity.home.local`) || Host(`ubooquity.home.external`)"
      - "traefik.http.services.ubooquity.loadbalancer.server.port=2202"
      - "traefik.http.routers.ubooquity.middlewares=auth@file"
      - "traefik.http.routers.ubooquity.service=ubooquity"
      - "traefik.http.routers.ubooquity-admin.rule=Host(`ubooquity-admin.home.local`) || Host(`ubooquity-admin.home.external`)"
      - "traefik.http.services.ubooquity-admin.loadbalancer.server.port=2203"
      - "traefik.http.routers.ubooquity-admin.middlewares=auth@file"
      - "traefik.http.routers.ubooquity-admin.service=ubooquity-admin"
    networks:
      - default
      - traefik-public

  calibre-web:
    image: ghcr.io/linuxserver/calibre-web
    container_name: calibre-web
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/Brussels}
      - DOCKER_MODS=linuxserver/calibre-web:calibre
    volumes:
      - ./storage/calibre-web-config:/config
      - ./storage/calibre-web:/books
    restart: unless-stopped
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.calibre.rule=Host(`calibre.home.local`) || Host(`calibre.home.external`)"
      - "traefik.http.services.calibre.loadbalancer.server.port=8083"
      - "traefik.enable=true"

  registry:
    restart: always
    image: registry:2
    volumes:
      - ./storage/registry:/var/lib/registry
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.registry.rule=Host(`registry.home.local`)"
      - "traefik.http.routers.registry.tls=true"
      - "traefik.http.services.registry.loadbalancer.server.port=5000"
      - "traefik.enable=true"

  crafty:
    cpus: '2.4'
    mem_limit: 4000m
    image: ohmymndy/crafty:0.1
    init: true
    ports:
      - 25565:25565
    restart: unless-stopped
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /dev/shm:/dev/shm:rw
      - /etc/machine-id:/etc/machine-id:ro
      - ./storage/crafty/db:/crafty_db:rw
      - ./storage/crafty/certs:/home/mandy/crafty/crafty-web/app/web/certs:rw        
      - ./storage/crafty/minecraft:/home/mandy/Minecraft:rw
    labels:
      - "traefik.docker.network=default"
      - "traefik.http.routers.crafty.rule=Host(`crafty.home.local`)"
      - "traefik.http.routers.crafty.tls=true"
      - "traefik.http.services.crafty.loadbalancer.server.port=8000"
      - "traefik.http.services.crafty.loadbalancer.server.scheme=https"
      - "traefik.enable=true"

  shinobi:
    image: ohmymndy/shinobi:latest
    build:
      context: ./dockerfiles/shinobi
    cpus: '2'
    init: true
    mem_limit: 2000m
    restart: unless-stopped
    environment:
      - PLUGIN_PORT=8080
    volumes:
      - /dev/shm/Shinobi/streams:/dev/shm/streams
      - /tank/shinobi/customAutoLoad:/home/Shinobi/libs/customAutoLoad
      - /tank/shinobi/database:/var/lib/mysql
      - /tank/shinobi/videos:/home/Shinobi/videos
      - /tank/shinobi/plugins:/home/Shinobi/plugins
      - /etc/localtime:/etc/localtime:ro
      - /var/lib/lxcfs/proc/cpuinfo:/proc/cpuinfo:rw
      - /var/lib/lxcfs/proc/diskstats:/proc/diskstats:rw
      - /var/lib/lxcfs/proc/meminfo:/proc/meminfo:rw
      - /var/lib/lxcfs/proc/stat:/proc/stat:rw
      - /var/lib/lxcfs/proc/swaps:/proc/swaps:rw
      - /var/lib/lxcfs/proc/uptime:/proc/uptime:rw
    labels:
      - "traefik.http.routers.shinobi.rule=Host(`shinobi.home.external`) || Host(`shinobi.home.local`)"
      - "traefik.http.services.shinobi.loadbalancer.server.port=8080"
      - "traefik.enable=true"
      - "traefik.tags=traefik-both"
      - "traefik.http.routers.shinobi.middlewares=auth@file"
    networks:
      - default
      - traefik-public

  rsnapshot:
    image: ohmymndy/rsnapshot:0.1
    build:
      context: ./dockerfiles/rsnapshot
    container_name: rsnapshot
    env_file:
      - ./.env
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/Brussels}
    volumes:
      - ./etc/rsnapshot:/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /tank/rsnapshot:/.snapshots #optional
      - /tank:/tank
      - $HOME/docker:$HOME/docker
      - $HOME/Documents:$HOME/Documents
    restart: unless-stopped


networks:
  default:
    driver: bridge
  traefik-public:
    driver: bridge
  bridge:
    external:
      name: bridge

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  # networks: ["demo"]
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER:?}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:?}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
  links:
    - postgres

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  # networks: ["demo"]
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ./storage/ollama:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  # networks: ["demo"]
  container_name: ollama-pull-llama
  volumes:
    - ./storage/ollama:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
    - "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull llama3.2:1B"

services:
  postgres:
    image: postgres:16-alpine
    # networks: ["demo"]
    restart: unless-stopped
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - ./storage/postgres:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    # ports:
    #   - 5678:5678
    volumes:
      - ./storage/n8n:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    networks:
      - default
      - reverse-proxy
    # command: server
    labels:
      - "traefik.docker.network=reverse-proxy"
      - "traefik.http.routers.n8n.rule=Host(`n8n.home.ohmymndy.com`)"
      # - "traefik.http.services.n8n.loadbalancer.server.port=9000"
      - "traefik.http.routers.n8n.tls=true"
      - "traefik.enable=true"
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    # networks: ["demo"]
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - ./storage/qdrant:/qdrant/storage

  ollama-cpu:
    # profiles: ["cpu"]
    <<: *service-ollama
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 5000M
          # pids: 1
        reservations:
          cpus: "0.25"
          memory: 3400M

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-pull-llama-cpu:
    # profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu
networks:
  default:
  reverse-proxy:
    name: reverse-proxy
    external: true
